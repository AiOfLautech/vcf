<!-- File: Contact-Vcf-main/views/private-chat.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUser.username %> | Contact Gain</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
         :root {
             --primary: #6366f1;
             --primary-light: #818cf8;
             --secondary: #10b981;
             --danger: #ef4444;
             --warning: #f59e0b;
             --info: #0ea5e9;
             --dark: #1e293b;
             --light: #f8fafc;
             --gray: #94a3b8;
             --card-bg: #ffffff;
             --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
         }

        * { box-sizing: border-box; margin: 0; padding: 0; }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9;
            color: var(--dark);
            display: flex;
            min-height: 100vh;
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }

        .sidebar {
            width: 250px;
            background: var(--card-bg);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }
        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--gray);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }
        .nav-link:hover, .nav-link.active {
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary);
        }
        .nav-link i { font-size: 1.2rem; width: 24px; text-align: center; margin-right: 0.75rem; }

        .user-section { margin-top: auto; padding-top: 1rem; border-top: 1px solid rgba(0, 0, 0, 0.1); }
        .user-info { display: flex; align-items: center; gap: 12px; }
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: white;
            position: relative;
            overflow: hidden;
        }
         .user-avatar img { width: 100%; height: 100%; border-radius: 50%; object-fit: cover; }
        .online-dot {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 10px;
            height: 10px;
            background: var(--secondary);
            border-radius: 50%;
            border: 2px solid var(--card-bg);
        }
        .user-details { flex-grow: 1; }
        .user-name { font-weight: 600; margin-bottom: 0.2rem; font-size: 0.95rem; }
        .user-email { font-size: 0.8rem; color: var(--gray); }
        .logout-btn {
            display: block;
            width: 100%;
            text-align: center;
            padding: 0.6rem;
            margin-top: 1rem;
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
        }
        .logout-btn:hover { background: rgba(239, 68, 68, 0.2); }

        .main-content {
            flex-grow: 1;
            padding: 2rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
            animation: slideInDown 0.5s ease-out;
        }
        @keyframes slideInDown { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

        .back-btn {
             background: none;
             border: none;
             color: var(--primary);
             font-size: 1.5rem;
             cursor: pointer;
             margin-right: 1rem;
             transition: transform 0.2s ease;
         }
        .back-btn:hover { transform: translateX(-3px); }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
        }

        .other-user-info {
             display: flex;
             align-items: center;
             gap: 10px;
             margin-left: auto;
         }

        .other-user-avatar {
             width: 40px;
             height: 40px;
             border-radius: 50%;
             background: var(--primary);
             display: flex;
             align-items: center;
             justify-content: center;
             font-weight: 700;
             color: white;
             position: relative;
             overflow: hidden;
         }
         .other-user-avatar img { width: 100%; height: 100%; border-radius: 50%; object-fit: cover; }
         .other-user-name { font-weight: 600; }

         .messages-container {
            flex-grow: 1;
            height: 500px;
            overflow-y: auto;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            margin-bottom: 1rem;
            scroll-behavior: smooth;
        }

        .message {
            display: flex;
            gap: 1rem;
            max-width: 80%;
            opacity: 0;
            transform: translateY(10px);
            animation: messageAppear 0.3s forwards;
        }
        @keyframes messageAppear { to { opacity: 1; transform: translateY(0); } }
        .message.received { align-self: flex-start; }
        .message.sent { align-self: flex-end; flex-direction: row-reverse; }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            flex-shrink: 0;
        }

        .message-content {
            display: flex;
            flex-direction: column;
        }

        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.3rem;
        }

        .message-username {
            font-weight: 600;
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: var(--gray);
        }

        .message-text {
            padding: 0.75rem 1rem;
            border-radius: 18px;
            word-break: break-word;
        }

        .message.received .message-text {
            background: #e2e8f0;
            border-top-left-radius: 4px;
        }

        .message.sent .message-text {
            background: var(--primary);
            color: white;
            border-top-right-radius: 4px;
        }

        .input-area {
            display: flex;
            gap: 0.8rem;
            background: white;
            padding: 1rem;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            animation: slideInUp 0.5s ease-out;
        }
        @keyframes slideInUp { from { transform: translateY(20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

        .message-input {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
        }
        .message-input:focus { border-color: var(--primary); }

        .send-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .send-btn:hover {
            background: var(--primary-light);
            transform: scale(1.05);
        }

        .typing-indicator {
            font-size: 0.9rem;
            color: var(--gray);
            font-style: italic;
            margin-top: 0.5rem;
            padding-left: 1rem;
            animation: fadeIn 0.5s ease-in-out;
        }

    </style>
</head>
<body>
<div class="sidebar">
    <a href="/terminal" class="nav-link"><i class="fas fa-home"></i> <span>Dashboard</span></a>
    <a href="/chat" class="nav-link"><i class="fas fa-comments"></i> <span>Community Chat</span></a>
    <a href="/profile" class="nav-link"><i class="fas fa-user"></i> <span>My Profile</span></a>
    <a href="/api-docs" class="nav-link"><i class="fas fa-code"></i> <span>API Docs</span></a>
    <div class="user-section">
        <div class="user-info">
            <div class="user-avatar">
                <% if (currentUser.profile && currentUser.profile.profilePic) { %>
                <img src="<%= currentUser.profile.profilePic %>" alt="Profile">
                <% } else { %>
                <%= currentUser.username.charAt(0).toUpperCase() %>
                <% } %>
                <div class="online-dot" id="currentUserOnlineDot"></div>
            </div>
            <div class="user-details">
                <div class="user-name"><%= currentUser.username %></div>
                <div class="user-email"><%= currentUser.email %></div>
            </div>
        </div>
        <form action="/logout" method="POST">
            <button type="submit" class="logout-btn"><i class="fas fa-sign-out-alt"></i> <span>Logout</span></button>
        </form>
    </div>
</div>

<div class="main-content">
    <div class="chat-header">
        <button class="back-btn" onclick="window.location.href='/chat'"><i class="fas fa-arrow-left"></i></button>
        <h2 class="section-title">Chat with <%= otherUser.username %></h2>
        <div class="other-user-info">
             <div class="other-user-avatar">
                 <% if (otherUser.profile && otherUser.profile.profilePic) { %>
                     <img src="<%= otherUser.profile.profilePic %>" alt="<%= otherUser.username %>">
                 <% } else { %>
                     <%= otherUser.username.charAt(0).toUpperCase() %>
                 <% } %>
                 <div class="online-dot" id="otherUserOnlineDot"></div>
             </div>
             <div class="other-user-name"><%= otherUser.username %></div>
         </div>
    </div>

    <div class="messages-container" id="messagesContainer"></div>

    <div class="typing-indicator" id="typingIndicator"></div>

    <div class="input-area">
        <input type="text" class="message-input" id="messageInput" placeholder="Type a private message...">
        <button class="send-btn" id="sendBtn"><i class="fas fa-paper-plane"></i></button>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const otherUserId = '<%= otherUser._id %>';
    const currentUserId = '<%= currentUser._id %>';
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const typingIndicator = document.getElementById('typingIndicator');
    let typingTimeout;

    function scrollToBottom() { messagesContainer.scrollTop = messagesContainer.scrollHeight; }
    function formatTime(date) { return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); }

    function sendMessage() {
        const content = messageInput.value.trim();
        if (content) {
            socket.emit('sendPrivateMessage', { content: content, recipientId: otherUserId });
            messageInput.value = '';
            clearTimeout(typingTimeout);
            socket.emit('privateTyping', { isTyping: false, recipientId: otherUserId });
        }
    }

    sendBtn.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
        else {
            socket.emit('privateTyping', { isTyping: true, recipientId: otherUserId });
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('privateTyping', { isTyping: false, recipientId: otherUserId });
            }, 1000);
        }
    });

    socket.on('receivePrivateMessage', (data) => {
        if ((data.senderId === otherUserId && data.recipientId === currentUserId) ||
            (data.senderId === currentUserId && data.recipientId === otherUserId)) {

            const messageElement = document.createElement('div');
            messageElement.className = `message ${data.senderId === currentUserId ? 'sent' : 'received'}`;
            messageElement.dataset.messageId = data._id;

            const messageTime = data.timestamp ? new Date(data.timestamp) : new Date();
            const formattedTime = formatTime(messageTime);

            const sender = data.senderId === currentUserId ? '<%= currentUser.username %>' : '<%= otherUser.username %>';
            const avatarContent = data.senderId === currentUserId ?
                (<%= currentUser.profile && currentUser.profile.profilePic ? `"<img src='${currentUser.profile.profilePic}' alt='Profile'>"` : `"${currentUser.username.charAt(0).toUpperCase()}"` %>) :
                (<%= otherUser.profile && otherUser.profile.profilePic ? `"<img src='${otherUser.profile.profilePic}' alt='Profile'>"` : `"${otherUser.username.charAt(0).toUpperCase()}"` %>);

            messageElement.innerHTML = `
                <div class="message-avatar">${avatarContent}</div>
                <div class="message-content">
                    <div class="message-header">
                        <div class="message-username">${sender}</div>
                        <div class="message-time">${formattedTime}</div>
                    </div>
                    <div class="message-text">${data.content.replace(/\n/g, '<br>')}</div>
                </div>
            `;

            messagesContainer.appendChild(messageElement);
            scrollToBottom();
        }
    });

    socket.on('privateTyping', (data) => {
         if ((data.userId === otherUserId && data.recipientId === currentUserId)) {
             typingIndicator.textContent = data.isTyping ? `<%= otherUser.username %> is typing...` : '';
         }
    });

    socket.on('errorMessage', (data) => {
         alert(data.message);
     });

    scrollToBottom();
</script>
</body>
</html>
