<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Private Chat | Contact Gain</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6366f1;
      --primary-light: #818cf8;
      --secondary: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #0ea5e9;
      --dark: #1e293b;
      --light: #f8fafc;
      --gray: #94a3b8;
      --card-bg: #ffffff;
      --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background-color: #f1f5f9;
      color: #334155;
      min-height: 100vh;
    }

.chat-container {
  max-width: 800px;
  margin: 0 auto;
  background: linear-gradient(rgba(99, 102, 241, 0.3), rgba(99, 102, 241, 0.3)), 
              url('https://plus.unsplash.com/premium_photo-1676033456843-2c14a242be81?q=80&w=1616&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
  background-size: cover;
  background-position: center;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: var(--card-shadow);
}

    .chat-header {
      background: linear-gradient(135deg, var(--primary), var(--primary-light));
      padding: 1.5rem;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .back-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .back-btn:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background:var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      position: relative;
      flex-shrink: 0;
    }

    .user-avatar img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
    }

    .online-status {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 12px;
      height: 12px;
      background: var(--secondary);
      border-radius: 50%;
      border: 2px solid var(--primary-light);
    }

    .user-info {
      flex-grow: 1;
    }

    .user-name {
      font-weight: 600;
      font-size: 1.2rem;
      color: white;
    }

    .user-status {
      font-size: 0.85rem;
      color: rgba(255, 255, 255, 0.8);
    }

    .messages-container {
      height: 500px;
      overflow-y: auto;
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .message {
      display: flex;
      gap: 1rem;
      max-width: 80%;
    }

    .message.received {
      align-self: flex-start;
    }

    .message.sent {
      align-self: flex-end;
      flex-direction: row-reverse;
    }

    .message-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      flex-shrink: 0;
    }

    .message-avatar img {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
    }

    .message-content {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1rem;
      box-shadow: var(--card-shadow);
      position: relative;
    }

    .message.received .message-content {
      border-top-left-radius: 0;
    }

    .message.sent .message-content {
      border-top-right-radius: 0;
      background: var(--primary-light);
      color: white;
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }

    .message-username {
      font-weight: 600;
      font-size: 0.95rem;
    }

    .message-time {
      font-size: 0.8rem;
      color: var(--gray);
    }

    .message.sent .message-time {
      color: rgba(255, 255, 255, 0.7);
    }

    .message-text {
      line-height: 1.5;
    }

    .input-area {
      padding: 1rem;
      background: var(--card-bg);
      border-top: 1px solid #e2e8f0;
    }

    .typing-indicator {
      height: 20px;
      font-size: 0.85rem;
      color: var(--gray);
      padding: 0 1rem;
      margin-bottom: 0.5rem;
    }

    .input-container {
      display: flex;
      gap: 1rem;
    }

    .message-input {
      flex-grow: 1;
      padding: 1rem 1.5rem;
      border: 1px solid #e2e8f0;
      border-radius: 30px;
      resize: none;
      max-height: 150px;
    }

    .send-button {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 1.2rem;
    }

    @media (max-width: 768px) {
      .chat-header {
        padding: 1rem;
      }
      
      .messages-container {
        height: 400px;
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-header">
      <a href="/conversations" class="back-btn">
        <i class="fas fa-arrow-left"></i>
      </a>
      <div class="user-avatar">
        <% if (recipient.profile && recipient.profile.profilePic) { %>
          <img src="<%= recipient.profile.profilePic %>" alt="Profile">
        <% } else { %>
          <%= recipient.username.charAt(0).toUpperCase() %>
        <% } %>
        <% if (recipient.lastSeen > Date.now() - 300000) { %>
          <div class="online-status"></div>
        <% } %>
      </div>
      <div class="user-info">
        <div class="user-name"><%= recipient.profile?.name || recipient.username %></div>
        <div class="user-status">
          <% if (recipient.lastSeen > Date.now() - 300000) { %>
            Online now
          <% } else { %>
            Last seen <%= new Date(recipient.lastSeen).toLocaleTimeString() %>
          <% } %>
        </div>
      </div>
    </div>
    
    <div class="messages-container" id="messagesContainer">
      <% messages.forEach(message => { %>
        <div class="message <%= message.userId._id.toString() === user._id.toString() ? 'sent' : 'received' %>">
          <div class="message-avatar">
            <% if (message.userId.profile && message.userId.profile.profilePic) { %>
              <img src="<%= message.userId.profile.profilePic %>" alt="Profile">
            <% } else { %>
              <%= message.userId.username.charAt(0).toUpperCase() %>
            <% } %>
          </div>
          <div class="message-content">
            <div class="message-text">
              <%= message.content %>
            </div>
            <div class="message-time">
              <%= new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
    
    <div class="typing-indicator" id="typingIndicator"></div>
    
    <div class="input-area">
      <div class="input-container">
        <textarea class="message-input" id="messageInput" placeholder="Type your message..."></textarea>
        <button class="send-button" id="sendButton">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const userId = '<%= user._id %>';
    const recipientId = '<%= recipient._id %>';
    
    socket.emit('join', userId);
    
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const typingIndicator = document.getElementById('typingIndicator');
    
    // Scroll to bottom
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Send message
    function sendMessage() {
      const content = messageInput.value.trim();
      if (content) {
        socket.emit('private-message', {
          senderId: userId,
          recipientId: recipientId,
          content: content
        });
        messageInput.value = '';
        scrollToBottom();
      }
    }
    
    // Typing indicator
    let typingTimeout;
    messageInput.addEventListener('input', () => {
      socket.emit('typing', {
        senderId: userId,
        recipientId: recipientId,
        isTyping: true
      });
      
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('typing', {
          senderId: userId,
          recipientId: recipientId,
          isTyping: false
        });
      }, 1000);
    });
    
    // Receive messages
    socket.on('private-message', (data) => {
      if (data.sender.id === recipientId || data.sender.id === userId) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${data.sender.id === userId ? 'sent' : 'received'}`;
        messageElement.innerHTML = `
          <div class="message-avatar">
            ${data.sender.profile?.profilePic ? 
              `<img src="${data.sender.profile.profilePic}" alt="Profile">` : 
              data.sender.username.charAt(0).toUpperCase()}
          </div>
          <div class="message-content">
            <div class="message-text">
              ${data.content}
            </div>
            <div class="message-time">
              ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        `;
        messagesContainer.appendChild(messageElement);
        scrollToBottom();
      }
    });
    
    // Typing indicators
    socket.on('typing', (data) => {
      if (data.senderId === recipientId) {
        if (data.isTyping) {
          typingIndicator.textContent = `${'<%= recipient.username %>'} is typing...`;
        } else {
          typingIndicator.textContent = '';
        }
      }
    });
    
    // Send button click
    sendButton.addEventListener('click', sendMessage);
    
    // Enter key to send
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
    
    // Initial scroll to bottom
    scrollToBottom();
  </script>
</body>
</html>
