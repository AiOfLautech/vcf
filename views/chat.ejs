const express = require('express');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const mongoose = require('mongoose');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcryptjs');
const http = require('http');
const socketIo = require('socket.io');
const sharedsession = require('express-socket.io-session');
const { body, validationResult } = require('express-validator');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// MongoDB Models (assuming these are defined elsewhere)
const User = require('./models/User');
const Message = require('./models/Message');
const PrivateMessage = require('./models/PrivateMessage');
const Group = require('./models/Group');

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.set('view engine', 'ejs');

const sessionMiddleware = session({
  secret: process.env.SESSION_SECRET || 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({ mongoUrl: process.env.MONGODB_URI || 'mongodb://localhost:27017/contactgain' })
});

app.use(sessionMiddleware);
app.use(passport.initialize());
app.use(passport.session());

// Passport Configuration
passport.use(new LocalStrategy(async (username, password, done) => {
  try {
    const user = await User.findOne({ username });
    if (!user) return done(null, false, { message: 'Incorrect username.' });
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return done(null, false, { message: 'Incorrect password.' });
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
  try {
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err);
  }
});

// Authentication Middleware
function isAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  res.redirect('/login');
}

// Routes
app.get('/chat', isAuthenticated, async (req, res) => {
  try {
    let group = await Group.findOne().populate('members admins');
    if (!group) {
      group = new Group({
        name: 'Community Chat',
        description: 'Welcome to the Contact Gain community!',
        members: [req.user._id],
        admins: []
      });
      await group.save();
    } else if (!group.members.some(m => m._id.toString() === req.user._id.toString())) {
      group.members.push(req.user._id);
      await group.save();
      group = await Group.findById(group._id).populate('members admins');
    }
    const messages = await Message.find().populate('sender replyTo').sort({ timestamp: 1 });
    const groupLink = `${req.protocol}://${req.get('host')}/chat`;
    res.render('chat', {
      user: req.user,
      messages,
      group,
      members: group.members,
      groupLink
    });
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

// Socket.io Configuration
io.use(sharedsession(sessionMiddleware, { autoSave: true }));

io.on('connection', async (socket) => {
  const user = socket.handshake.session.passport?.user ? await User.findById(socket.handshake.session.passport.user) : null;
  if (!user) return socket.disconnect();

  user.isOnline = true;
  await user.save();
  io.emit('userStatus', { userId: user._id, isOnline: true });

  let group = await Group.findOne();
  if (!group) {
    group = new Group({ members: [user._id] });
    await group.save();
  } else if (!group.members.includes(user._id)) {
    group.members.push(user._id);
    await group.save();
  }

  socket.on('chatMessage', async (data) => {
    const message = new Message({
      sender: user._id,
      content: data.content,
      replyTo: data.replyTo || null
    });
    await message.save();
    const populatedMessage = await Message.findById(message._id).populate('sender replyTo');
    io.emit('chatMessage', populatedMessage);
  });

  socket.on('disconnect', async () => {
    user.isOnline = false;
    await user.save();
    io.emit('userStatus', { userId: user._id, isOnline: false });
  });
});

// Start Server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
