<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Community Chat | Contact Gain</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6366f1;
      --primary-light: #818cf8;
      --dark: #1e293b;
      --light: #f8fafc;
      --gray: #94a3b8;
      --card-bg: #ffffff;
      --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      height: 100vh;
      display: flex;
      background: #f1f5f9;
    }

    .chat-container {
      display: flex;
      width: 100%;
      height: 100vh;
    }

    /* Sidebar */
    .sidebar {
      width: 300px;
      background: var(--dark);
      color: white;
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
    }

    .group-header {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      cursor: pointer;
    }

    .group-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      position: relative;
    }

    .online-dot {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 12px;
      height: 12px;
      background: #10b981;
      border-radius: 50%;
      border: 2px solid var(--dark);
    }

    .group-info {
      flex-grow: 1;
    }

    .group-name {
      font-weight: 600;
      font-size: 1.1rem;
    }

    .online-count {
      font-size: 0.9rem;
      color: var(--gray);
    }

    .members-list {
      flex-grow: 1;
      overflow-y: auto;
      margin-top: 1rem;
    }

    .member {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 0.8rem;
      border-radius: 8px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .member:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .member-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary-light);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .member-online {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 10px;
      height: 10px;
      background: #10b981;
      border-radius: 50%;
      border: 2px solid var(--dark);
    }

    .member-info {
      flex-grow: 1;
    }

    .member-name {
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .admin-badge {
      color: gold;
      font-size: 0.8rem;
    }

    .member-status {
      font-size: 0.8rem;
      color: var(--gray);
    }

    .group-actions {
      margin-top: auto;
      padding-top: 1rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .action-btn {
      width: 100%;
      padding: 0.8rem;
      background: rgba(99, 102, 241, 0.15);
      border: none;
      border-radius: 8px;
      color: var(--primary-light);
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.8rem;
      margin-bottom: 0.5rem;
    }

    .action-btn:hover {
      background: rgba(99, 102, 241, 0.25);
    }

    /* Chat Area */
    .chat-area {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }

    .chat-header {
      padding: 1rem 1.5rem;
      background: var(--card-bg);
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .chat-title {
      font-weight: 600;
      font-size: 1.2rem;
      color: var(--dark);
    }

    .ai-btn {
      padding: 0.5rem 1rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 20px;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .messages-container {
      flex-grow: 1;
      padding: 1.5rem;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }

    .message {
      max-width: 70%;
      padding: 0.8rem 1rem;
      border-radius: 12px;
      margin-bottom: 1rem;
      position: relative;
    }

    .message-sent {
      align-self: flex-end;
      background: var(--primary);
      color: white;
      border-bottom-right-radius: 0;
    }

    .message-received {
      align-self: flex-start;
      background: #e2e8f0;
      color: var(--dark);
      border-bottom-left-radius: 0;
    }

    .message-info {
      display: flex;
      justify-content: space-between;
      margin-top: 0.5rem;
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .message-actions {
      position: absolute;
      top: -20px;
      right: 0;
      background: white;
      border-radius: 20px;
      box-shadow: var(--card-shadow);
      display: none;
    }

    .message:hover .message-actions {
      display: flex;
    }

    .action-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .action-icon:hover {
      background: #f1f5f9;
    }

    .pinned-message {
      background: #fffbeb;
      border-left: 3px solid #f59e0b;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
    }

    .pinned-label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #f59e0b;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }

    .typing-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background: #f1f5f9;
      border-radius: 20px;
      align-self: flex-start;
      margin-bottom: 1rem;
    }

    .typing-dots {
      display: flex;
      gap: 0.3rem;
    }

    .typing-dot {
      width: 8px;
      height: 8px;
      background: var(--gray);
      border-radius: 50%;
      animation: pulse 1.5s infinite;
    }

    .typing-dot:nth-child(2) {
      animation-delay: 0.5s;
    }

    .typing-dot:nth-child(3) {
      animation-delay: 1s;
    }

    @keyframes pulse {
      0%, 100% { opacity: 0.4; }
      50% { opacity: 1; }
    }

    .input-area {
      padding: 1rem;
      background: var(--card-bg);
      border-top: 1px solid #e2e8f0;
      display: flex;
      gap: 0.8rem;
    }

    .message-input {
      flex-grow: 1;
      padding: 0.8rem 1.2rem;
      border: 1px solid #e2e8f0;
      border-radius: 24px;
      resize: none;
      max-height: 120px;
    }

    .upload-btn, .send-btn {
      width: 44px;
      height: 44px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .upload-btn {
      background: #f1f5f9;
      color: var(--dark);
    }

    .send-btn {
      background: var(--primary);
      color: white;
    }

    .deleted-message {
      font-style: italic;
      color: var(--gray);
      padding: 0.8rem;
      background: #f1f5f9;
      border-radius: 8px;
    }

    .reply-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      background: rgba(99, 102, 241, 0.1);
      border-radius: 8px;
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
    }

    .close-reply {
      cursor: pointer;
    }

    /* Profile Modal */
    .profile-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      display: none;
    }

    .profile-content {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      overflow: hidden;
    }

    .profile-header {
      padding: 1.5rem;
      background: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .profile-body {
      padding: 1.5rem;
    }

    .profile-info {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .profile-avatar {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: var(--primary-light);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5rem;
      margin-bottom: 1rem;
      position: relative;
    }

    .profile-online {
      position: absolute;
      bottom: 5px;
      right: 5px;
      width: 20px;
      height: 20px;
      background: #10b981;
      border-radius: 50%;
      border: 3px solid white;
    }

    .profile-name {
      font-size: 1.5rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .profile-details {
      width: 100%;
    }

    .detail-item {
      display: flex;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .detail-label {
      width: 120px;
      font-weight: 500;
      color: var(--gray);
    }

    .detail-value {
      flex-grow: 1;
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .modal-btn {
      flex: 1;
      padding: 0.8rem;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      text-align: center;
    }

    .message-btn {
      background: var(--primary);
      color: white;
    }

    .close-btn {
      background: #f1f5f9;
      color: var(--dark);
    }

    @media (max-width: 768px) {
      .chat-container {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        height: 300px;
      }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="group-header" id="groupInfo">
        <div class="group-avatar">
          <i class="fas fa-users"></i>
          <div class="online-dot"></div>
        </div>
        <div class="group-info">
          <div class="group-name">Main Community</div>
          <div class="online-count"><span id="onlineCount">0</span> online</div>
        </div>
      </div>
      
      <div class="members-list" id="membersList">
        <!-- Members will be populated here -->
      </div>
      
      <div class="group-actions">
        <button class="action-btn" id="aiButton">
          <i class="fas fa-hashtag"></i> AI Assistant
        </button>
        <button class="action-btn" onclick="location.href='/terminal'">
          <i class="fas fa-arrow-left"></i> Back to Dashboard
        </button>
      </div>
    </div>
    
    <!-- Chat Area -->
    <div class="chat-area">
      <div class="chat-header">
        <div class="chat-title">Community Chat</div>
        <button class="ai-btn">
          <i class="fas fa-robot"></i> AI Assistant
        </button>
      </div>
      
      <div class="messages-container" id="messagesContainer">
        <!-- Messages will be populated here -->
      </div>
      
      <div class="input-area">
        <textarea class="message-input" id="messageInput" placeholder="Type a message..." rows="1"></textarea>
        <div class="upload-btn">
          <i class="fas fa-paperclip"></i>
          <input type="file" id="fileUpload" style="display: none;">
        </div>
        <div class="send-btn" id="sendButton">
          <i class="fas fa-paper-plane"></i>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Profile Modal -->
  <div class="profile-modal" id="profileModal">
    <div class="profile-content">
      <div class="profile-header">
        <h3>User Profile</h3>
        <i class="fas fa-times" id="closeProfile"></i>
      </div>
      <div class="profile-body" id="profileBody">
        <!-- Profile content will be populated here -->
      </div>
    </div>
  </div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const userId = '<%= user._id %>';
    const isAdmin = <%= user.isAdmin %>;
    const groupId = '<%= group._id %>';
    
    // Join chat on page load
    socket.emit('join', { userId });
    
    // DOM elements
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const membersList = document.getElementById('membersList');
    const onlineCount = document.getElementById('onlineCount');
    const profileModal = document.getElementById('profileModal');
    const profileBody = document.getElementById('profileBody');
    const closeProfile = document.getElementById('closeProfile');
    
    // Render messages
    function renderMessages(messages) {
      messagesContainer.innerHTML = '';
      
      // Add pinned messages first
      const pinnedMessages = messages.filter(msg => msg.pinned);
      if (pinnedMessages.length > 0) {
        pinnedMessages.forEach(msg => {
          const messageEl = createMessageElement(msg, true);
          messagesContainer.appendChild(messageEl);
        });
        
        const separator = document.createElement('div');
        separator.innerHTML = '<div style="text-align: center; margin: 1rem 0; color: var(--gray);">--- Recent Messages ---</div>';
        messagesContainer.appendChild(separator);
      }
      
      // Add other messages
      messages.filter(msg => !msg.pinned).forEach(msg => {
        const messageEl = createMessageElement(msg, false);
        messagesContainer.appendChild(messageEl);
      });
      
      scrollToBottom();
    }
    
    function createMessageElement(msg, isPinned) {
      const isSent = msg.sender._id.toString() === userId;
      const isDeleted = msg.isDeleted;
      const isPinnedMsg = msg.pinned;
      
      const messageEl = document.createElement('div');
      
      if (isPinned) {
        messageEl.className = 'pinned-message';
        messageEl.innerHTML = `
          <div class="pinned-label">
            <i class="fas fa-thumbtack"></i> Pinned Message
          </div>
          <div class="message ${isSent ? 'message-sent' : 'message-received'}">
            <div class="message-content">${msg.content}</div>
            <div class="message-info">
              <span>${isSent ? 'You' : msg.sender.username}</span>
              <span>${new Date(msg.createdAt).toLocaleTimeString()}</span>
            </div>
          </div>
        `;
        return messageEl;
      }
      
      if (isDeleted) {
        messageEl.className = 'deleted-message';
        messageEl.innerHTML = `
          <i class="fas fa-ban"></i> This message was deleted ${msg.deletedBy ? 'by admin' : ''}
        `;
        return messageEl;
      }
      
      messageEl.className = `message ${isSent ? 'message-sent' : 'message-received'}`;
      
      let content = `
        <div class="message-content">${msg.content}</div>
      `;
      
      if (msg.replies && msg.replies.length > 0) {
        content += `<div class="reply-indicator">
          <i class="fas fa-reply"></i> ${msg.replies.length} ${msg.replies.length === 1 ? 'reply' : 'replies'}
        </div>`;
      }
      
      content += `
        <div class="message-info">
          <span>${isSent ? 'You' : msg.sender.username}</span>
          <span>${new Date(msg.createdAt).toLocaleTimeString()}</span>
        </div>
      `;
      
      messageEl.innerHTML = content;
      
      if (!isSent) {
        const messageActions = document.createElement('div');
        messageActions.className = 'message-actions';
        messageActions.innerHTML = `
          <div class="action-icon" onclick="replyToMessage('${msg._id}', '${msg.sender.username}')">
            <i class="fas fa-reply"></i>
          </div>
          <div class="action-icon" onclick="copyMessage('${msg.content}')">
            <i class="fas fa-copy"></i>
          </div>
          ${isAdmin ? `
            <div class="action-icon" onclick="deleteMessage('${msg._id}', true)">
              <i class="fas fa-trash"></i>
            </div>
            <div class="action-icon" onclick="pinMessage('${msg._id}')">
              <i class="fas fa-thumbtack"></i>
            </div>
          ` : ''}
        `;
        messageEl.appendChild(messageActions);
      }
      
      return messageEl;
    }
    
    // Render members
    function renderMembers(members, onlineUsers) {
      membersList.innerHTML = '';
      let onlineCount = 0;
      
      members.forEach(member => {
        const isOnline = onlineUsers.includes(member._id.toString());
        if (isOnline) onlineCount++;
        
        const memberEl = document.createElement('div');
        memberEl.className = 'member';
        memberEl.onclick = () => showProfile(member._id);
        memberEl.innerHTML = `
          <div class="member-avatar">
            ${member.username.charAt(0).toUpperCase()}
            ${isOnline ? '<div class="member-online"></div>' : ''}
          </div>
          <div class="member-info">
            <div class="member-name">
              ${member.username}
              ${member.isAdmin ? '<i class="fas fa-shield-alt admin-badge"></i>' : ''}
            </div>
            <div class="member-status">
              ${isOnline ? 'Online' : 'Offline'}
            </div>
          </div>
        `;
        membersList.appendChild(memberEl);
      });
      
      document.getElementById('onlineCount').textContent = onlineCount;
    }
    
    // Scroll to bottom of messages
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Show user profile
    function showProfile(userId) {
      fetch(`/profile/${userId}`)
        .then(response => response.text())
        .then(html => {
          profileBody.innerHTML = html;
          profileModal.style.display = 'flex';
        });
    }
    
    // Close profile modal
    closeProfile.onclick = () => {
      profileModal.style.display = 'none';
    };
    
    // Send message
    function sendMessage() {
      const content = messageInput.value.trim();
      if (content) {
        socket.emit('group-message', {
          userId,
          groupId,
          content
        });
        messageInput.value = '';
      }
    }
    
    // Socket event listeners
    socket.on('new-group-message', (message) => {
      const messagesContainer = document.getElementById('messagesContainer');
      const messageEl = createMessageElement(message, false);
      messagesContainer.appendChild(messageEl);
      scrollToBottom();
    });
    
    socket.on('user-status', (data) => {
      // Refresh members list
      fetch(`/group-members/${groupId}`)
        .then(response => response.json())
        .then(members => {
          renderMembers(members, Array.from(onlineUsers.keys()));
        });
    });
    
    socket.on('typing', (data) => {
      // Show typing indicator
      // (Implementation omitted for brevity)
    });
    
    socket.on('message-deleted', (data) => {
      const messageEl = document.querySelector(`[data-id="${data.messageId}"]`);
      if (messageEl) {
        messageEl.innerHTML = `
          <div class="deleted-message">
            <i class="fas fa-ban"></i> This message was deleted ${data.deletedBy === 'admin' ? 'by admin' : ''}
          </div>
        `;
      }
    });
    
    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      // Render initial messages
      renderMessages(<%- JSON.stringify(messages) %>);
      
      // Render members
      renderMembers(<%- JSON.stringify(group.members) %>, <%- JSON.stringify(onlineUsers) %>);
      
      // Event listeners
      sendButton.addEventListener('click', sendMessage);
      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
      
      messageInput.addEventListener('input', () => {
        socket.emit('typing', { groupId, userId, isTyping: true });
        setTimeout(() => {
          socket.emit('typing', { groupId, userId, isTyping: false });
        }, 2000);
      });
    });
    
    // Helper functions
    function replyToMessage(messageId, username) {
      messageInput.value = `@${username} `;
      messageInput.focus();
    }
    
    function copyMessage(content) {
      navigator.clipboard.writeText(content);
      alert('Message copied to clipboard');
    }
    
    function deleteMessage(messageId, isAdmin) {
      if (confirm('Are you sure you want to delete this message?')) {
        socket.emit('delete-message', { messageId, userId, isAdmin });
      }
    }
    
    function pinMessage(messageId) {
      // Implementation would update message in DB and notify clients
      alert('Message pinned');
    }
  </script>
</body>
</html>
