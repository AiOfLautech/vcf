<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Private Chat | Contact Gain</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-light: #818cf8;
            --secondary: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #0ea5e9;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #94a3b8;
            --card-bg: #ffffff;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9;
            color: var(--dark);
            min-height: 100vh;
            padding-bottom: 3rem;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .chat-container {
            background: var(--card-bg);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            display: flex;
            flex-direction: column;
            height: calc(100vh - 4rem);
        }
        
        .chat-header {
            padding: 1.25rem 1.5rem;
            background: linear-gradient(135deg, var(--primary), #4f46e5);
            color: white;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .avatar {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            background: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-name {
            font-weight: 600;
            font-size: 1.125rem;
        }
        
        .user-status {
            font-size: 0.875rem;
            opacity: 0.9;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }
        
        .status-indicator {
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 50%;
        }
        
        .status-online {
            background: var(--secondary);
        }
        
        .status-offline {
            background: var(--gray);
        }
        
        .chat-actions {
            display: flex;
            gap: 0.75rem;
        }
        
        .action-btn {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .action-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        .chat-body {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .message-group {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .message-date {
            text-align: center;
            margin: 1.5rem 0;
        }
        
        .date-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: var(--gray);
            color: white;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .message {
            max-width: 70%;
            padding: 0.75rem 1rem;
            border-radius: 12px;
            position: relative;
            animation: fadeIn 0.2s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .message.sent {
            background: var(--primary);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        .message.received {
            background: #edf2f7;
            color: var(--dark);
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }
        
        .message.deleted {
            background: #f8fafc;
            color: var(--gray);
            font-style: italic;
            cursor: default;
            pointer-events: none;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .sender-name {
            font-weight: 600;
            font-size: 0.875rem;
        }
        
        .message-time {
            font-size: 0.75rem;
            opacity: 0.8;
        }
        
        .message-content {
            word-wrap: break-word;
        }
        
        .message-actions {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            display: none;
            gap: 0.5rem;
        }
        
        .message:hover .message-actions {
            display: flex;
        }
        
        .message-btn {
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .message-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            color: var(--gray);
            font-size: 0.875rem;
            margin-top: 0.5rem;
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 0.4; }
            50% { opacity: 1; }
            100% { opacity: 0.4; }
        }
        
        .typing-dots {
            display: flex;
            gap: 0.25rem;
        }
        
        .typing-dot {
            width: 0.5rem;
            height: 0.5rem;
            border-radius: 50%;
            background: var(--gray);
        }
        
        .chat-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid #e2e8f0;
            background: white;
        }
        
        .message-input-container {
            position: relative;
        }
        
        .message-input {
            width: 100%;
            padding: 0.75rem 3rem 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            resize: none;
            height: 50px;
            max-height: 150px;
            overflow-y: auto;
        }
        
        .message-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
        }
        
        .input-actions {
            position: absolute;
            right: 0.75rem;
            bottom: 0.75rem;
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }
        
        .input-btn {
            width: 2rem;
            height: 2rem;
            border-radius: 8px;
            background: var(--primary-light);
            color: white;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .input-btn:hover {
            background: var(--primary);
            transform: scale(1.05);
        }
        
        .ai-panel {
            position: absolute;
            top: -180px;
            right: 0;
            width: 300px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            z-index: 10;
            display: none;
            animation: slideDown 0.3s ease;
        }
        
        @keyframes slideDown {
            from { transform: translateY(-10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .ai-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .ai-title {
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .ai-close {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            font-size: 1.25rem;
        }
        
        .ai-models {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .model-btn {
            flex: 1;
            padding: 0.5rem;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            background: white;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.875rem;
        }
        
        .model-btn.active {
            border-color: var(--primary);
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary);
            font-weight: 500;
        }
        
        .ai-response {
            background: #f8fafc;
            border-radius: 8px;
            padding: 1rem;
            font-size: 0.875rem;
            line-height: 1.5;
            color: var(--dark);
            border-left: 3px solid var(--primary);
        }
        
        .ai-response-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            font-size: 0.75rem;
            color: var(--gray);
        }
        
        .ai-creator {
            font-weight: 600;
            color: var(--primary);
        }
        
        .reply-highlight {
            background: rgba(99, 102, 241, 0.1);
            border-left: 3px solid var(--primary);
            padding: 0.5rem;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .chat-container {
                height: calc(100vh - 2rem);
                border-radius: 12px;
            }
            
            .message {
                max-width: 85%;
            }
            
            .ai-panel {
                width: 250px;
                top: -150px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-container">
            <div class="chat-header">
                <div class="avatar">
                    <%= recipient.profile?.name ? recipient.profile.name.charAt(0) : recipient.username.charAt(0) %>
                </div>
                <div class="user-info">
                    <div class="user-name">
                        <%= recipient.profile?.name || recipient.username %>
                    </div>
                    <div class="user-status">
                        <span class="status-indicator <%= recipient.isSuspended ? 'status-offline' : 'status-online' %>"></span>
                        <%= recipient.isSuspended ? 'Suspended' : 'Online' %>
                    </div>
                </div>
                <div class="chat-actions">
                    <button class="action-btn" title="Profile">
                        <i class="fas fa-user"></i>
                    </button>
                    <button class="action-btn" title="Call">
                        <i class="fas fa-phone"></i>
                    </button>
                </div>
            </div>
            
            <div class="chat-body" id="chatBody">
                <div class="message-group">
                    <div class="message-date">
                        <span class="date-badge">Today</span>
                    </div>
                    
                    <% messages.forEach(message => { %>
                        <% const isMine = message.userId.toString() === user._id.toString() %>
                        <div class="message <%= isMine ? 'sent' : 'received' %> <%= message.isDeleted ? 'deleted' : '' %>" 
                             data-message-id="<%= message._id %>">
                            <% if (!isMine) { %>
                            <div class="message-header">
                                <div class="sender-name">
                                    <%= isMine ? 'You' : (recipient.profile?.name || recipient.username) %>
                                </div>
                                <div class="message-time">
                                    <%= new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
                                    <% if (message.editedAt) { %> (edited)<% } %>
                                </div>
                            </div>
                            <% } %>
                            
                            <div class="message-content">
                                <% if (message.isDeleted) { %>
                                    <i class="fas fa-trash"></i> This message was deleted
                                <% } else if (message.messageType === 'reply' && message.repliedTo) { %>
                                    <div class="reply-highlight">
                                        <%= message.repliedTo.content.substring(0, 50) %><%= message.repliedTo.content.length > 50 ? '...' : '' %>
                                    </div>
                                    <%= message.content %>
                                <% } else { %>
                                    <%= message.content %>
                                <% } %>
                            </div>
                            
                            <% if (isMine && !message.isDeleted) { %>
                            <div class="message-actions">
                                <div class="message-btn edit-btn" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </div>
                                <div class="message-btn delete-btn" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </div>
                            </div>
                            <% } %>
                        </div>
                    <% }); %>
                    
                    <div class="typing-indicator" id="typingIndicator" style="display: none;">
                        <span class="sender-name"><%= recipient.profile?.name || recipient.username %></span> is typing
                        <div class="typing-dots">
                            <span class="typing-dot"></span>
                            <span class="typing-dot"></span>
                            <span class="typing-dot"></span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="chat-footer">
                <div class="message-input-container">
                    <textarea 
                        class="message-input" 
                        id="messageInput" 
                        placeholder="Type a message..." 
                        rows="1"></textarea>
                    
                    <div class="input-actions">
                        <button class="input-btn" id="aiButton">
                            <i class="fas fa-robot"></i>
                        </button>
                        <button class="input-btn" id="sendButton">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    
                    <div class="ai-panel" id="aiPanel">
                        <div class="ai-header">
                            <div class="ai-title">
                                <i class="fas fa-robot"></i> AI Assistant
                            </div>
                            <button class="ai-close" id="closeAiPanel">&times;</button>
                        </div>
                        
                        <div class="ai-models">
                            <button class="model-btn active" data-model="standard">Standard</button>
                            <button class="model-btn" data-model="premium">Premium</button>
                        </div>
                        
                        <div class="ai-response">
                            <div class="ai-response-header">
                                <span class="ai-creator">Contact Gain AI</span>
                                <span class="response-time">Just now</span>
                            </div>
                            <p>Ask me anything about networking, contact management, or how to grow your business with Contact Gain!</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize Socket.IO
        const socket = io({
            auth: {
                userId: '<%= user._id %>'
            }
        });
        
        const chatBody = document.getElementById('chatBody');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const aiButton = document.getElementById('aiButton');
        const aiPanel = document.getElementById('aiPanel');
        const closeAiPanel = document.getElementById('closeAiPanel');
        const typingIndicator = document.getElementById('typingIndicator');
        
        let isTyping = false;
        let typingTimer;
        let currentModel = 'standard';
        const recipientId = '<%= recipient._id %>';
        
        // Set up message input auto-resize
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
            
            // Send typing indicator
            if (!isTyping) {
                isTyping = true;
                socket.emit('typing', { 
                    isTyping: true,
                    recipientId: recipientId
                });
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                isTyping = false;
                socket.emit('typing', { 
                    isTyping: false,
                    recipientId: recipientId
                });
            }, 1000);
        });
        
        // Close AI panel
        closeAiPanel.addEventListener('click', () => {
            aiPanel.style.display = 'none';
        });
        
        // Toggle AI panel
        aiButton.addEventListener('click', () => {
            aiPanel.style.display = aiPanel.style.display === 'block' ? 'none' : 'block';
        });
        
        // Model selection
        document.querySelectorAll('.model-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.model-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                button.classList.add('active');
                currentModel = button.dataset.model;
            });
        });
        
        // Send message function
        function sendMessage() {
            const content = messageInput.value.trim();
            if (content) {
                // Add message to UI immediately (optimistic update)
                addMessage({
                    userId: { _id: '<%= user._id %>', username: '<%= user.username %>', profile: <%= JSON.stringify(user.profile) %> },
                    content,
                    createdAt: new Date(),
                    isMine: true
                });
                
                // Clear input and reset height
                messageInput.value = '';
                messageInput.style.height = '50px';
                
                // Send to server
                fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        content,
                        recipientId: recipientId
                    })
                }).catch(() => {
                    // If send fails, we could mark the message as failed
                    const lastMessage = chatBody.querySelector('.message.sent:last-child');
                    if (lastMessage) {
                        lastMessage.style.border = '1px solid var(--danger)';
                    }
                });
            }
        }
        
        // AI request
        document.getElementById('aiPanel').addEventListener('click', (e) => {
            if (e.target.classList.contains('model-btn') || 
                e.target.closest('.model-btn')) return;
                
            const content = messageInput.value.trim();
            if (content) {
                socket.emit('ai-request', {
                    userId: recipientId,
                    query: content,
                    model: currentModel
                });
                messageInput.value = '';
                aiPanel.style.display = 'none';
            }
        });
        
        // Send button click
        sendButton.addEventListener('click', sendMessage);
        
        // Enter key to send
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Add a message to the chat
        function addMessage(messageData) {
            const isMine = messageData.userId._id === '<%= user._id %>';
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isMine ? 'sent' : 'received'} ${messageData.isDeleted ? 'deleted' : ''}`;
            messageElement.dataset.messageId = messageData._id;
            
            // Format date
            const date = new Date(messageData.createdAt);
            const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            // Create message content
            let contentHTML = '';
            
            if (messageData.isDeleted) {
                contentHTML = '<i class="fas fa-trash"></i> This message was deleted';
            } else if (messageData.messageType === 'reply' && messageData.repliedTo) {
                contentHTML = `
                    <div class="reply-highlight">
                        ${messageData.repliedTo.content.substring(0, 50)}${messageData.repliedTo.content.length > 50 ? '...' : ''}
                    </div>
                    ${messageData.content}
                `;
            } else {
                contentHTML = messageData.content;
            }
            
            messageElement.innerHTML = `
                <% if (!isMine) { %>
                <div class="message-header">
                    <div class="sender-name">
                        <%= isMine ? 'You' : (recipient.profile?.name || recipient.username) %>
                    </div>
                    <div class="message-time">${timeString}${messageData.editedAt ? ' (edited)' : ''}</div>
                </div>
                <% } %>
                <div class="message-content">${contentHTML}</div>
            `;
            
            // Add message actions for own messages
            if (isMine && !messageData.isDeleted) {
                const actionsHTML = `
                    <div class="message-actions">
                        <div class="message-btn edit-btn" title="Edit">
                            <i class="fas fa-edit"></i>
                        </div>
                        <div class="message-btn delete-btn" title="Delete">
                            <i class="fas fa-trash"></i>
                        </div>
                    </div>
                `;
                messageElement.insertAdjacentHTML('beforeend', actionsHTML);
                
                // Add event listeners
                const editBtn = messageElement.querySelector('.edit-btn');
                const deleteBtn = messageElement.querySelector('.delete-btn');
                
                editBtn.addEventListener('click', () => {
                    const newContent = prompt('Edit your message:', messageData.content);
                    if (newContent && newContent.trim() !== messageData.content) {
                        fetch(`/api/messages/${messageData._id}/edit`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ content: newContent.trim() })
                        });
                    }
                });
                
                deleteBtn.addEventListener('click', () => {
                    if (confirm('Are you sure you want to delete this message?')) {
                        fetch(`/api/messages/${messageData._id}/delete`, {
                            method: 'POST'
                        });
                    }
                });
            }
            
            // Add to UI
            const messageGroup = chatBody.querySelector('.message-group');
            messageGroup.appendChild(messageElement);
            scrollToBottom();
        }
        
        // Add AI response
        function addAIResponse(response) {
            const aiMessageElement = document.createElement('div');
            aiMessageElement.className = 'message received';
            
            // Format date
            const date = new Date();
            const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            aiMessageElement.innerHTML = `
                <div class="message-header">
                    <div class="sender-name">Contact Gain AI</div>
                    <div class="message-time">${timeString}</div>
                </div>
                <div class="message-content">
                    <div class="ai-response">
                        <div class="ai-response-header">
                            <span class="ai-creator">Contact Gain AI</span>
                            <span class="response-time">Just now</span>
                        </div>
                        <p>${response.replace(/\n/g, '<br>')}</p>
                    </div>
                </div>
            `;
            
            const messageGroup = chatBody.querySelector('.message-group');
            messageGroup.appendChild(aiMessageElement);
            scrollToBottom();
        }
        
        // Scroll to bottom of chat
        function scrollToBottom() {
            chatBody.scrollTop = chatBody.scrollHeight;
        }
        
        // Socket.IO events
        socket.on('connect', () => {
            console.log('Connected to chat server');
        });
        
        socket.on('new-message', (message) => {
            if (message.recipient.toString() === '<%= user._id %>' && 
                message.userId.toString() === recipientId) {
                addMessage(message);
            }
        });
        
        socket.on('message-updated', (message) => {
            if (message.userId.toString() === recipientId || 
                message.recipient.toString() === recipientId) {
                const messageElement = document.querySelector(`.message[data-message-id="${message._id}"]`);
                if (messageElement) {
                    const contentElement = messageElement.querySelector('.message-content');
                    contentElement.innerHTML = message.content;
                    
                    const timeElement = messageElement.querySelector('.message-time');
                    timeElement.textContent = new Date(message.createdAt).toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    }) + ' (edited)';
                }
            }
        });
        
        socket.on('message-deleted', (message) => {
            if (message.userId.toString() === recipientId || 
                message.recipient.toString() === recipientId) {
                const messageElement = document.querySelector(`.message[data-message-id="${message._id}"]`);
                if (messageElement) {
                    messageElement.classList.add('deleted');
                    messageElement.querySelector('.message-content').innerHTML = 
                        '<i class="fas fa-trash"></i> This message was deleted';
                    
                    // Remove message actions
                    const actions = messageElement.querySelector('.message-actions');
                    if (actions) actions.remove();
                }
            }
        });
        
        socket.on('user-typing', (data) => {
            if (data.userId === recipientId.toString()) {
                if (data.isTyping) {
                    typingIndicator.style.display = 'flex';
                } else {
                    typingIndicator.style.display = 'none';
                }
            }
        });
        
        socket.on('ai-response', (data) => {
            if (data.userId === recipientId && data.error) {
                addMessage({
                    userId: { _id: 'ai', username: 'AI System' },
                    content: `⚠️ Error: ${data.error}`,
                    createdAt: new Date(),
                    isMine: false
                });
            } else if (data.userId === recipientId) {
                addAIResponse(data.response);
            }
        });
        
        // Initial scroll to bottom
        scrollToBottom();
    </script>
</body>
</html>
