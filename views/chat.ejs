<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Community Chat | Contact Gain</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6366f1;
      --primary-light: #818cf8;
      --secondary: #10b981;
      --danger: #ef4444;
      --warning: #f59e0b;
      --info: #0ea5e9;
      --dark: #1e293b;
      --light: #f8fafc;
      --gray: #94a3b8;
      --card-bg: #ffffff;
      --card-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }
    body {
      background: linear-gradient(to bottom, #e0e7ff, #f1f5f9);
      color: #334155;
      min-height: 100vh;
      animation: fadeIn 1s ease-in;
    }
    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    .chat-container {
      display: flex;
      min-height: 100vh;
    }
    .sidebar {
      width: 260px;
      background: var(--dark);
      color: white;
      padding: 1.5rem 1rem;
      display: flex;
      flex-direction: column;
      box-shadow: var(--card-shadow);
      position: fixed;
      height: 100vh;
      animation: slideInLeft 0.5s ease-out;
    }
    @keyframes slideInLeft { from { transform: translateX(-100%); } to { transform: translateX(0); } }
    .logo {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    .logo i {
      font-size: 1.8rem;
      color: var(--primary-light);
    }
    .logo-text {
      font-size: 1.4rem;
      font-weight: 700;
    }
    .logo-text span:first-child { color: var(--primary-light); }
    .logo-text span:last-child { color: white; }
    .nav-links {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      flex-grow: 1;
    }
    .nav-link {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 0.8rem 1rem;
      border-radius: 8px;
      text-decoration: none;
      color: var(--gray);
      transition: all 0.3s ease;
    }
    .nav-link:hover, .nav-link.active {
      background: rgba(99,102,241,0.15);
      color: var(--primary-light);
      transform: translateX(5px);
    }
    .nav-link i {
      font-size: 1.2rem;
      width: 24px;
    }
    .user-section {
      margin-top: auto;
      padding-top: 1rem;
      border-top: 1px solid rgba(255,255,255,0.1);
    }
    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      position: relative;
    }
    .online-dot {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 10px;
      height: 10px;
      background: var(--secondary);
      border-radius: 50%;
      border: 2px solid var(--dark);
    }
    .user-name {
      font-weight: 600;
      font-size: 0.95rem;
    }
    .user-email {
      font-size: 0.8rem;
      color: var(--gray);
    }
    .logout-btn {
      padding: 0.6rem;
      margin-top: 1rem;
      background: rgba(99,102,241,0.15);
      color: var(--primary-light);
      border-radius: 8px;
      text-decoration: none;
      text-align: center;
      transition: all 0.3s ease;
    }
    .logout-btn:hover {
      background: rgba(99,102,241,0.25);
      transform: scale(1.05);
    }
    .main-chat {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      margin-left: 260px;
    }
    .chat-header {
      background: var(--card-bg);
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 1rem;
      box-shadow: var(--card-shadow);
      animation: slideInDown 0.5s ease-out;
    }
    @keyframes slideInDown { from { transform: translateY(-100%); } to { transform: translateY(0); } }
    .group-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.2rem;
      cursor: pointer;
      transition: transform 0.3s ease;
    }
    .group-avatar:hover { transform: scale(1.1); }
    .group-info {
      flex-grow: 1;
    }
    .group-name {
      font-weight: 600;
      font-size: 1.2rem;
    }
    .group-status {
      font-size: 0.85rem;
      color: var(--gray);
    }
    .online-count {
      color: var(--secondary);
      font-weight: 500;
    }
    .chat-actions {
      display: flex;
      gap: 1rem;
    }
    .chat-action-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: #f1f5f9;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .chat-action-btn:hover {
      background: var(--primary-light);
      color: white;
      transform: rotate(15deg);
    }
    .messages-container {
      flex-grow: 1;
      overflow-y: auto;
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    .message {
      display: flex;
      gap: 1rem;
      max-width: 80%;
      animation: fadeInUp 0.5s ease-out;
    }
    @keyframes fadeInUp { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    .message.received { align-self: flex-start; }
    .message.sent { align-self: flex-end; flex-direction: row-reverse; }
    .message.pinned {
      border-left: 4px solid var(--secondary);
      background: rgba(16,185,129,0.1);
    }
    .message-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      flex-shrink: 0;
      position: relative;
      transition: transform 0.3s ease;
    }
    .message-avatar:hover { transform: scale(1.1); }
    .online-status {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 10px;
      height: 10px;
      background: var(--secondary);
      border-radius: 50%;
      border: 2px solid var(--card-bg);
    }
    .message-content {
      background: var(--card-bg);
      border-radius: 12px;
      padding: 1rem;
      box-shadow: var(--card-shadow);
      position: relative;
    }
    .message.received .message-content { border-top-left-radius: 0; }
    .message.sent .message-content {
      border-top-right-radius: 0;
      background: var(--primary-light);
      color: white;
    }
    .message-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }
    .message-username {
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
    }
    .message-time {
      font-size: 0.8rem;
      color: var(--gray);
    }
    .message.sent .message-time { color: rgba(255,255,255,0.7); }
    .message-text {
      line-height: 1.5;
      word-break: break-word;
    }
    .message-actions {
      position: absolute;
      top: -40px;
      right: 0;
      background: white;
      border-radius: 20px;
      box-shadow: var(--card-shadow);
      display: flex;
      gap: 5px;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .message:hover .message-actions { opacity: 1; }
    .message-action {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .message-action:hover {
      background: #f1f5f9;
      transform: scale(1.1);
    }
    .ai-response {
      background: #f0f9ff;
      border-radius: 12px;
      padding: 1rem;
      border-left: 4px solid var(--info);
      margin-top: 1rem;
      font-family: monospace;
      white-space: pre-wrap;
    }
    .ai-footer {
      font-size: 0.8rem;
      color: var(--gray);
      text-align: right;
      margin-top: 0.5rem;
    }
    .input-area {
      padding: 1rem;
      background: var(--card-bg);
      border-top: 1px solid #e2e8f0;
      box-shadow: var(--card-shadow);
    }
    .typing-indicator {
      height: 20px;
      font-size: 0.85rem;
      color: var(--gray);
      padding: 0 1rem;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
    }
    .typing-svg {
      width: 20px;
      height: 20px;
      margin-left: 5px;
    }
    .input-container {
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    .message-input {
      flex-grow: 1;
      padding: 1rem 1.5rem;
      border: 1px solid #e2e8f0;
      border-radius: 30px;
      resize: none;
      max-height: 150px;
      transition: all 0.3s ease;
    }
    .message-input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 5px rgba(99,102,241,0.3);
    }
    .ai-button, .send-button {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .ai-button:hover, .send-button:hover {
      background: var(--primary-light);
      transform: scale(1.1);
    }
    .ai-panel {
      position: absolute;
      bottom: 80px;
      right: 20px;
      width: 300px;
      background: white;
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      padding: 1rem;
      display: none;
      z-index: 100;
      animation: fadeInUp 0.3s ease-out;
    }
    .ai-header-panel {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #e2e8f0;
    }
    .ai-title {
      font-weight: 600;
      color: var(--primary);
    }
    .close-ai {
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .close-ai:hover { color: var(--danger); }
    .ai-options {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem;
    }
    .ai-option {
      padding: 0.8rem;
      background: #f1f5f9;
      border-radius: 8px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .ai-option:hover {
      background: var(--primary-light);
      color: white;
      transform: scale(1.05);
    }
    .inline-buttons {
      position: absolute;
      bottom: 100%;
      left: 0;
      background: #fff;
      border-radius: 8px;
      box-shadow: var(--card-shadow);
      padding: 0.5rem;
      display: none;
      z-index: 10;
    }
    .inline-button {
      padding: 0.5rem 1rem;
      background: var(--primary);
      color: white;
      border-radius: 5px;
      cursor: pointer;
      margin: 0.2rem;
      transition: all 0.3s ease;
    }
    .inline-button:hover {
      background: var(--primary-light);
      transform: scale(1.05);
    }
    @media (max-width: 768px) {
      .chat-container { flex-direction: column; }
      .sidebar { width: 100%; position: static; }
      .main-chat { margin-left: 0; }
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="sidebar">
      <div class="logo">
        <i class="fas fa-bolt"></i>
        <div class="logo-text"><span>Contact</span><span>Gain</span></div>
      </div>
      <div class="nav-links">
        <a href="/terminal" class="nav-link"><i class="fas fa-chart-line"></i> Dashboard</a>
        <a href="/chat" class="nav-link active"><i class="fas fa-comments"></i> Community Chat</a>
        <a href="/conversations" class="nav-link"><i class="fas fa-envelope"></i> Messages</a>
      </div>
      <div class="user-section">
        <div class="user-info">
          <div class="user-avatar">
            <% if (user.profile && user.profile.profilePic) { %>
              <img src="<%= user.profile.profilePic %>" alt="Profile" style="width:100%;height:100%;border-radius:50%;">
            <% } else { %>
              <%= user.username.charAt(0).toUpperCase() %>
            <% } %>
            <div class="online-dot"></div>
          </div>
          <div class="user-details">
            <div class="user-name"><%= user.username %></div>
            <div class="user-email"><%= user.isAdmin ? 'Admin' : 'Member' %></div>
          </div>
        </div>
        <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
      </div>
    </div>

    <div class="main-chat">
      <div class="chat-header">
        <div class="group-avatar" onclick="window.location.href='/group/<%= group._id %>'">
          <% if (group.profilePic) { %>
            <img src="<%= group.profilePic %>" alt="Group" style="width:100%;height:100%;border-radius:50%;">
          <% } else { %>
            <i class="fas fa-users"></i>
          <% } %>
        </div>
        <div class="group-info">
          <div class="group-name"><%= group.name %></div>
          <div class="group-status">
            <span class="online-count"><%= onlineUsers.length %> online</span> • <%= group.members.length %> members
          </div>
        </div>
        <div class="chat-actions">
          <div class="chat-action-btn" onclick="window.location.href='/group/<%= group._id %>'">
            <i class="fas fa-info-circle"></i>
          </div>
        </div>
      </div>

      <div class="messages-container" id="messagesContainer">
        <% messages.forEach(message => { %>
          <% if (message.deleted) { %>
            <div class="message deleted" id="msg-<%= message._id %>">
              <div class="message-content">
                <em><%= message.deletedBy ? 'This message was deleted by admin' : 'This message was deleted' %></em>
              </div>
            </div>
          <% } else { %>
            <div class="message <%= message.userId._id.toString() === user._id.toString() ? 'sent' : 'received' %> <%= message.pinned ? 'pinned' : '' %>" id="msg-<%= message._id %>">
              <div class="message-avatar" onclick="window.location.href='/profile/<%= message.userId._id %>'">
                <% if (message.userId.profile && message.userId.profile.profilePic) { %>
                  <img src="<%= message.userId.profile.profilePic %>" alt="Profile" style="width:100%;height:100%;border-radius:50%;">
                <% } else { %>
                  <%= message.userId.username.charAt(0).toUpperCase() %>
                <% } %>
                <% if (onlineUsers.some(u => u._id.toString() === message.userId._id.toString())) { %>
                  <div class="online-status"></div>
                <% } %>
              </div>
              <div class="message-content">
                <div class="message-header">
                  <div class="message-username" onclick="window.location.href='/profile/<%= message.userId._id %>'">
                    <%= message.userId.username %>
                    <% if (message.userId.isAdmin) { %>
                      <i class="fas fa-check-circle" style="color: var(--info); margin-left: 5px;"></i>
                    <% } %>
                  </div>
                  <div class="message-time">
                    <%= new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
                  </div>
                </div>
                <div class="message-text" id="text-<%= message._id %>">
                  <% if (message.repliedTo) { %>
                    <div style="background: #e2e8f0; padding: 0.5rem; border-radius: 5px; margin-bottom: 0.5rem;">
                      <em>Replying to <%= message.repliedTo.userId.username %>:</em> <%= message.repliedTo.content %>
                    </div>
                  <% } %>
                  <%- message.content %>
                </div>
                <div class="message-actions">
                  <div class="message-action" onclick="replyMessage('<%= message._id %>', '<%= message.userId.username %>')"><i class="fas fa-reply"></i></div>
                  <% if (message.userId._id.toString() === user._id.toString() || user.isAdmin) { %>
                    <div class="message-action" onclick="editMessage('<%= message._id %>')"><i class="fas fa-edit"></i></div>
                    <div class="message-action" onclick="deleteMessage('<%= message._id %>')"><i class="fas fa-trash"></i></div>
                  <% } %>
                  <% if (user.isAdmin) { %>
                    <div class="message-action" onclick="pinMessage('<%= message._id %>')"><i class="fas fa-thumbtack"></i></div>
                  <% } %>
                  <% if (message.userId._id.toString() === user._id.toString()) { %>
                    <div class="message-action" onclick="copyMessage('<%= message._id %>')"><i class="fas fa-copy"></i></div>
                  <% } %>
                </div>
              </div>
            </div>
          <% } %>
        <% }); %>
      </div>

      <div class="typing-indicator" id="typingIndicator">
        <svg class="typing-svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <circle cx="4" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite"/></circle>
          <circle cx="12" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite" begin="0.2s"/></circle>
          <circle cx="20" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite" begin="0.4s"/></circle>
        </svg>
      </div>

      <div class="input-area">
        <div class="input-container">
          <div class="ai-button" id="aiButton"><i class="fas fa-hashtag"></i></div>
          <textarea class="message-input" id="messageInput" placeholder="Type your message..."></textarea>
          <div class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></div>
        </div>
      </div>

      <div class="ai-panel" id="aiPanel">
        <div class="ai-header-panel">
          <div class="ai-title">AI Assistant</div>
          <div class="close-ai" id="closeAi"><i class="fas fa-times"></i></div>
        </div>
        <div class="ai-options">
          <div class="ai-option" data-model="chatgpt">ChatGPT</div>
          <div class="ai-option" data-model="llama">Llama 3</div>
          <div class="ai-option" data-model="gemini">Gemini</div>
          <div class="ai-option" data-model="deepseekv3">DeepSeek V3</div>
          <div class="ai-option" data-model="gpt4">GPT-4</div>
          <div class="ai-option" data-model="claude">Claude</div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js"></script>
  <script>
    const socket = io();
    const userId = '<%= user._id %>';
    const isAdmin = <%= user.isAdmin %>;
    socket.emit('join', userId);

    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const typingIndicator = document.getElementById('typingIndicator');
    const aiButton = document.getElementById('aiButton');
    const aiPanel = document.getElementById('aiPanel');
    const closeAi = document.getElementById('closeAi');

    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function sendMessage() {
      const content = messageInput.value.trim();
      if (!content) return;
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*';
      fileInput.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
          const formData = new FormData();
          formData.append('image', file);
          fetch('/upload', {
            method: 'POST',
            body: formData
          }).then(res => res.json()).then(data => {
            socket.emit('chat-message', { userId, content: `<img src="${data.url}" alt="Uploaded Image" style="max-width: 300px;">`, isPrivate: false });
            messageInput.value = '';
          });
        } else {
          socket.emit('chat-message', { userId, content, isPrivate: false });
          messageInput.value = '';
        }
      };
      if (content.startsWith('/upload')) {
        fileInput.click();
      } else {
        socket.emit('chat-message', { userId, content, isPrivate: false });
        messageInput.value = '';
      }
      scrollToBottom();
    }

    let typingTimeout;
    messageInput.addEventListener('input', () => {
      socket.emit('typing', { userId, isTyping: true, isPrivate: false });
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => socket.emit('typing', { userId, isTyping: false, isPrivate: false }), 1000);
    });

    socket.on('chat-message', (data) => {
      if (data.isPrivate) return;
      const messageElement = document.createElement('div');
      messageElement.className = `message ${data.user.id === userId ? 'sent' : 'received'}`;
      messageElement.id = `msg-${data._id}`;
      messageElement.innerHTML = `
        <div class="message-avatar" onclick="window.location.href='/profile/${data.user.id}'">
          ${data.user.profile?.profilePic ? `<img src="${data.user.profile.profilePic}" alt="Profile" style="width:100%;height:100%;border-radius:50%;">` : data.user.username.charAt(0).toUpperCase()}
          <div class="online-status" id="status-${data.user.id}" style="display: none;"></div>
        </div>
        <div class="message-content">
          <div class="message-header">
            <div class="message-username" onclick="window.location.href='/profile/${data.user.id}'">${data.user.username} ${data.user.isAdmin ? '<i class="fas fa-check-circle" style="color: var(--info); margin-left: 5px;"></i>' : ''}</div>
            <div class="message-time">${new Date(data.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
          </div>
          <div class="message-text" id="text-${data._id}">${data.content}</div>
          <div class="message-actions">
            <div class="message-action" onclick="replyMessage('${data._id}', '${data.user.username}')"><i class="fas fa-reply"></i></div>
            ${data.user.id === userId || isAdmin ? `<div class="message-action" onclick="editMessage('${data._id}')"><i class="fas fa-edit"></i></div>` : ''}
            ${data.user.id === userId || isAdmin ? `<div class="message-action" onclick="deleteMessage('${data._id}')"><i class="fas fa-trash"></i></div>` : ''}
            ${isAdmin ? `<div class="message-action" onclick="pinMessage('${data._id}')"><i class="fas fa-thumbtack"></i></div>` : ''}
            ${data.user.id === userId ? `<div class="message-action" onclick="copyMessage('${data._id}')"><i class="fas fa-copy"></i></div>` : ''}
          </div>
        </div>
      `;
      messagesContainer.appendChild(messageElement);
      scrollToBottom();
    });

    socket.on('message-deleted', (data) => {
      const message = document.getElementById(`msg-${data.messageId}`);
      if (message) {
        message.className = 'message deleted';
        message.innerHTML = `<div class="message-content"><em>${data.deletedByAdmin ? 'This message was deleted by admin' : 'This message was deleted'}</em></div>`;
      }
    });

    socket.on('message-edited', (data) => {
      const textElement = document.getElementById(`text-${data.messageId}`);
      if (textElement) textElement.innerHTML = data.content + ' <em>(Edited)</em>';
    });

    socket.on('message-pinned', (data) => {
      const message = document.getElementById(`msg-${data.messageId}`);
      if (message) message.classList.toggle('pinned', data.pinned);
    });

    socket.on('ai-response', (data) => {
      const aiElement = document.createElement('div');
      aiElement.className = 'message received';
      aiElement.innerHTML = `
        <div class="message-avatar"><i class="fas fa-robot"></i></div>
        <div class="message-content">${data.content}</div>
      `;
      messagesContainer.appendChild(aiElement);
      scrollToBottom();
    });

    socket.on('community-typing', (data) => {
      if (data.isTyping) {
        typingIndicator.innerHTML = `${data.user.username} is typing <svg class="typing-svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="4" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite"/></circle><circle cx="12" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite" begin="0.2s"/></circle><circle cx="20" cy="12" r="2"><animate attributeName="r" values="2;1;2" dur="1s" repeatCount="indefinite" begin="0.4s"/></circle></svg>`;
      } else {
        typingIndicator.innerHTML = '';
      }
    });

    socket.on('online-users', (users) => {
      users.forEach(user => {
        const status = document.getElementById(`status-${user._id}`);
        if (status) status.style.display = 'block';
      });
    });

    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    aiButton.addEventListener('click', () => {
      aiPanel.style.display = aiPanel.style.display === 'block' ? 'none' : 'block';
    });

    closeAi.addEventListener('click', () => {
      aiPanel.style.display = 'none';
    });

    document.querySelectorAll('.ai-option').forEach(option => {
      option.addEventListener('click', () => {
        const model = option.dataset.model;
        const content = messageInput.value.trim();
        if (content) {
          socket.emit('ai-request', { userId, query: content, model });
          messageInput.value = '';
          aiPanel.style.display = 'none';
        }
      });
    });

    messageInput.addEventListener('input', () => {
      if (messageInput.value.includes('@AI')) {
        const buttons = document.createElement('div');
        buttons.className = 'inline-buttons';
        buttons.innerHTML = `
          <div class="inline-button" onclick="triggerAI('chatgpt')">ChatGPT</div>
          <div class="inline-button" onclick="triggerAI('gemini')">Gemini</div>
          <div class="inline-button" onclick="triggerAI('llama')">Llama</div>
        `;
        messageInput.parentElement.appendChild(buttons);
        buttons.style.display = 'block';
        setTimeout(() => buttons.remove(), 3000);
      }
    });

    function triggerAI(model) {
      const content = messageInput.value.replace('@AI', '').trim();
      if (content) {
        socket.emit('ai-request', { userId, query: content, model });
        messageInput.value = '';
      }
    }

    function deleteMessage(messageId) {
      if (confirm('Are you sure you want to delete this message?')) {
        socket.emit('delete-message', { messageId, userId, isAdmin });
      }
    }

    function editMessage(messageId) {
      const textElement = document.getElementById(`text-${messageId}`);
      const originalContent = textElement.innerText.replace(' (Edited)', '');
      const newContent = prompt('Edit message:', originalContent);
      if (newContent) {
        socket.emit('edit-message', { messageId, content: newContent, userId, isAdmin });
      }
    }

    function pinMessage(messageId) {
      socket.emit('pin-message', { messageId, userId, isAdmin: true });
    }

    function replyMessage(messageId, username) {
      messageInput.value = `@${username} `;
      messageInput.focus();
      messageInput.dataset.replyTo = messageId;
    }

    function copyMessage(messageId) {
      const textElement = document.getElementById(`text-${messageId}`);
      navigator.clipboard.writeText(textElement.innerText.replace(' (Edited)', ''));
      alert('Message copied to clipboard!');
    }

    scrollToBottom();
  </script>
</body>
</html>
