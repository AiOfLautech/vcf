<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Community Chat | Contact Gain</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-light: #818cf8;
            --secondary: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #0ea5e9;
            --dark: #0f172a;
            --light: #f8fafc;
            --gray: #94a3b8;
            --card-bg: #1e293b;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --glass: rgba(15, 23, 42, 0.85);
            --border: rgba(255, 255, 255, 0.1);
            --success: #10b981;
            --typing: #0ea5e9;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background-color: var(--dark);
            color: var(--light);
            min-height: 100vh;
            display: flex;
        }
        
        .sidebar {
            width: 280px;
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-right: 1px solid var(--border);
            height: 100vh;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        
        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.25rem;
            font-weight: 700;
            color: white;
            text-decoration: none;
        }
        
        .logo span:first-child {
            color: var(--primary);
        }
        
        .search-box {
            position: relative;
            margin-top: 1rem;
        }
        
        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid var(--border);
            color: var(--light);
            font-size: 0.9rem;
        }
        
        .search-box input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }
        
        .conversations {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .conversation {
            padding: 1rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            display: flex;
            align-items: center;
            gap: 1rem;
            text-decoration: none;
        }
        
        .conversation:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .conversation.active {
            background: rgba(99, 102, 241, 0.15);
            border-left: 3px solid var(--primary);
        }
        
        .avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            flex-shrink: 0;
            position: relative;
        }
        
        .avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .avatar.online::after {
            content: '';
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            background: var(--success);
            border-radius: 50%;
            border: 2px solid var(--dark);
        }
        
        .conversation-info {
            flex: 1;
            overflow: hidden;
        }
        
        .conversation-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .is-admin {
            color: gold;
        }
        
        .is-super-admin {
            color: gold;
            text-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
        }
        
        .last-message {
            font-size: 0.85rem;
            color: var(--gray);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .conversation-time {
            font-size: 0.75rem;
            color: var(--gray);
            white-space: nowrap;
        }
        
        .conversation-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: var(--primary);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background: var(--dark);
        }
        
        .chat-header {
            padding: 1.25rem 2rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .chat-info h2 {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .chat-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .chat-status.online {
            color: var(--success);
        }
        
        .chat-status.typing {
            color: var(--typing);
        }
        
        .chat-actions {
            display: flex;
            gap: 1rem;
        }
        
        .chat-action {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .chat-action:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .message-group {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .message-date {
            text-align: center;
            font-size: 0.75rem;
            color: var(--gray);
            margin: 1rem 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }
        
        .message-date::before, .message-date::after {
            content: '';
            flex: 1;
            height: 1px;
            background: var(--border);
        }
        
        .message {
            max-width: 70%;
            padding: 1rem;
            border-radius: 12px;
            position: relative;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .message.sent {
            background: var(--primary);
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
        }
        
        .message.received {
            background: rgba(255, 255, 255, 0.05);
            color: var(--light);
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .message-author {
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .message-author .admin-badge {
            color: gold;
            font-size: 0.75rem;
        }
        
        .message-actions {
            display: none;
            gap: 0.5rem;
        }
        
        .message:hover .message-actions {
            display: flex;
        }
        
        .message-action-btn {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .message-action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            color: var(--light);
        }
        
        .message-content {
            line-height: 1.5;
        }
        
        .message-edited {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
        }
        
        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.25rem;
            text-align: right;
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            max-width: 200px;
            margin-left: 1rem;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--gray);
            border-radius: 50%;
            animation: typing 1.5s infinite;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        .chat-input {
            padding: 1.5rem 2rem;
            border-top: 1px solid var(--border);
            position: relative;
        }
        
        .chat-input-container {
            display: flex;
            gap: 1rem;
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 0.75rem 1.25rem;
            border: 1px solid var(--border);
        }
        
        .chat-input-container:focus-within {
            border-color: var(--primary);
        }
        
        .chat-input-container input {
            flex: 1;
            background: transparent;
            border: none;
            color: var(--light);
            font-size: 1rem;
            outline: none;
            resize: none;
            max-height: 100px;
            overflow-y: auto;
        }
        
        .chat-input-container input::placeholder {
            color: var(--gray);
        }
        
        .input-actions {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }
        
        .input-action {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .input-action:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .send-btn {
            width: 45px;
            height: 45px;
            border-radius: 12px;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }
        
        .send-btn:hover {
            background: var(--primary-light);
            transform: scale(1.05);
        }
        
        .ai-panel {
            position: absolute;
            bottom: 100%;
            left: 0;
            right: 0;
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border);
            display: none;
        }
        
        .ai-models {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 0.75rem;
        }
        
        .ai-model {
            padding: 0.75rem;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.05);
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .ai-model:hover {
            background: rgba(99, 102, 241, 0.1);
            transform: translateY(-2px);
        }
        
        .ai-model i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: var(--primary);
        }
        
        .ai-model.active {
            background: rgba(99, 102, 241, 0.2);
            border: 1px solid var(--primary);
        }
        
        .message.deleted {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .deleted-content {
            font-style: italic;
            color: var(--gray);
        }
        
        .ai-response {
            background: rgba(14, 165, 233, 0.1);
            border-left: 3px solid var(--info);
            border-radius: 8px;
            overflow: hidden;
        }
        
        .ai-header {
            padding: 0.75rem;
            background: rgba(14, 165, 233, 0.15);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }
        
        .ai-content {
            padding: 1rem;
            line-height: 1.6;
        }
        
        .ai-content pre {
            background: rgba(0, 0, 0, 0.2);
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            font-family: monospace;
            font-size: 0.9rem;
            line-height: 1.5;
            color: var(--light);
            margin: 0;
        }
        
        .ai-footer {
            padding: 0.75rem;
            text-align: right;
            font-size: 0.85rem;
            color: var(--gray);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .command-suggestion {
            position: absolute;
            bottom: 100%;
            left: 0;
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 0.5rem;
            border: 1px solid var(--border);
            width: 300px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }
        
        .command-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .command-item {
            padding: 0.5rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .command-item:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .command-name {
            font-weight: 500;
            color: var(--primary);
        }
        
        .command-desc {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .ban-list {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 2rem;
            width: 400px;
            max-width: 90%;
            border: 1px solid var(--border);
            z-index: 1000;
            display: none;
        }
        
        .ban-list-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .ban-list-header h3 {
            font-size: 1.25rem;
        }
        
        .ban-list-close {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 1.5rem;
            cursor: pointer;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }
        
        .ban-list-close:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .ban-users {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 5px;
        }
        
        .ban-user {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .ban-user:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .ban-user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }
        
        .ban-user-info {
            flex: 1;
        }
        
        .ban-user-name {
            font-weight: 500;
        }
        
        .ban-user-status {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            width: 500px;
            max-width: 90%;
            border: 1px solid var(--border);
            overflow: hidden;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--gray);
            cursor: pointer;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }
        
        .modal-close:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .modal-btn {
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-size: 1rem;
        }
        
        .modal-btn.cancel {
            background: rgba(255, 255, 255, 0.05);
            color: var(--light);
        }
        
        .modal-btn.cancel:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .modal-btn.confirm {
            background: var(--primary);
            color: white;
        }
        
        .modal-btn.confirm:hover {
            background: var(--primary-light);
        }
        
        .edit-message-form {
            display: none;
            margin-top: 0.5rem;
            padding: 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
        }
        
        .edit-message-form textarea {
            width: 100%;
            padding: 0.5rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid var(--border);
            color: var(--light);
            resize: none;
            min-height: 60px;
        }
        
        .edit-message-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        
        .edit-message-btn {
            padding: 0.25rem 0.75rem;
            border-radius: 6px;
            background: rgba(255, 255, 255, 0.05);
            border: none;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .edit-message-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .edit-message-btn.save {
            background: var(--primary);
            color: white;
        }
        
        .edit-message-btn.save:hover {
            background: var(--primary-light);
        }
        
        /* Responsive */
        @media (max-width: 992px) {
            .sidebar {
                width: 80px;
            }
            
            .sidebar-header, .conversation-info, .conversation-time, .conversation-badge {
                display: none;
            }
            
            .logo span {
                display: none;
            }
            
            .logo span:first-child {
                display: inline;
            }
            
            .search-box {
                display: none;
            }
            
            .avatar {
                margin: 0 auto;
            }
        }
        
        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
            }
            
            .messages {
                padding: 1.5rem;
            }
            
            .chat-header {
                padding: 1rem;
            }
            
            .chat-input {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <a href="/" class="logo">
                <i class="fas fa-bolt"></i>
                <div class="logo-text">
                    <span>Contact</span>
                    <span>Gain</span>
                </div>
            </a>
            
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Search conversations...">
            </div>
        </div>
        
        <div class="conversations">
            <a href="/chat" class="conversation active">
                <div class="avatar online">
                    <% if (user && user.profile && user.profile.profilePic) { %>
                        <img src="<%= user.profile.profilePic %>" alt="<%= user.username %>">
                    <% } else { %>
                        <%= user ? user.username.charAt(0).toUpperCase() : 'U' %>
                    <% } %>
                </div>
                <div class="conversation-info">
                    <div class="conversation-name">
                        Community Chat
                        <i class="fas fa-globe"></i>
                    </div>
                    <div class="last-message">Welcome to the Contact Gain community chat!</div>
                </div>
            </a>
            
            <% if (conversations && conversations.length > 0) { %>
                <% conversations.forEach(conversation => { %>
                    <a href="/private-chat/<%= conversation.otherUser._id %>" class="conversation">
                        <div class="avatar <%= conversation.otherUser.lastSeen && (new Date() - new Date(conversation.otherUser.lastSeen)) < 300000 ? 'online' : '' %>">
                            <% if (conversation.otherUser.profile && conversation.otherUser.profile.profilePic) { %>
                                <img src="<%= conversation.otherUser.profile.profilePic %>" alt="<%= conversation.otherUser.username %>">
                            <% } else { %>
                                <%= conversation.otherUser.username.charAt(0).toUpperCase() %>
                            <% } %>
                        </div>
                        <div class="conversation-info">
                            <div class="conversation-name">
                                <%= conversation.otherUser.profile?.name || conversation.otherUser.username %>
                                <% if (conversation.otherUser.isAdmin) { %>
                                    <i class="fas fa-star is-admin"></i>
                                <% } %>
                                <% if (conversation.otherUser.isSuperAdmin) { %>
                                    <i class="fas fa-star is-super-admin"></i>
                                    <i class="fas fa-star is-super-admin"></i>
                                <% } %>
                            </div>
                            <div class="last-message">
                                <% if (conversation.lastMessage) { %>
                                    <% if (conversation.lastMessage.userId.toString() === user._id.toString()) { %>You: <% } %>
                                    <%= conversation.lastMessage.content.length > 30 ? conversation.lastMessage.content.substring(0, 30) + '...' : conversation.lastMessage.content %>
                                <% } else { %>Start a conversation...<% } %>
                            </div>
                        </div>
                        <div class="conversation-time">
                            <% if (conversation.lastMessage) { %>
                                <%= new Date(conversation.lastMessage.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
                            <% } %>
                        </div>
                    </a>
                <% }); %>
            <% } else { %>
                <div class="conversation">
                    <div class="avatar">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="conversation-info">
                        <div class="conversation-name">No conversations yet</div>
                        <div class="last-message">Start a private message with someone</div>
                    </div>
                </div>
            <% } %>
        </div>
    </div>
    
    <div class="main-content">
        <div class="chat-header">
            <div class="chat-info">
                <div class="avatar online">
                    <i class="fas fa-globe"></i>
                </div>
                <div>
                    <h2>Community Chat</h2>
                    <div class="chat-status online"><i class="fas fa-circle"></i> Online</div>
                </div>
            </div>
            
            <div class="chat-actions">
                <div class="chat-action">
                    <i class="fas fa-info-circle"></i>
                </div>
                <div class="chat-action">
                    <i class="fas fa-cog"></i>
                </div>
            </div>
        </div>
        
        <div class="messages" id="messages">
            <!-- Messages will be loaded here via JavaScript -->
        </div>
        
        <div class="typing-indicator" id="typingIndicator" style="display: none;">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
        
        <div class="chat-input">
            <div class="ai-panel" id="aiPanel">
                <div class="ai-models">
                    <div class="ai-model" data-model="gpt">
                        <i class="fas fa-brain"></i>
                        <div>GPT</div>
                    </div>
                    <div class="ai-model" data-model="llama">
                        <i class="fas fa-dragon"></i>
                        <div>Llama</div>
                    </div>
                    <div class="ai-model" data-model="deepseek">
                        <i class="fas fa-search"></i>
                        <div>DeepSeek</div>
                    </div>
                    <div class="ai-model" data-model="gemini">
                        <i class="fas fa-gem"></i>
                        <div>Gemini</div>
                    </div>
                </div>
            </div>
            
            <div class="command-suggestion" id="commandSuggestion" style="display: none;">
                <div class="command-list">
                    <div class="command-item" data-command="/help">
                        <div class="command-name">/help</div>
                        <div class="command-desc">Show available commands</div>
                    </div>
                    <div class="command-item" data-command="/clearchat">
                        <div class="command-name">/clearchat</div>
                        <div class="command-desc">Clear the chat history</div>
                    </div>
                    <div class="command-item" data-command="/tagall">
                        <div class="command-name">/tagall</div>
                        <div class="command-desc">Tag all community members</div>
                    </div>
                    <div class="command-item" data-command="@AI">
                        <div class="command-name">@AI</div>
                        <div class="command-desc">Ask the AI assistant</div>
                    </div>
                </div>
            </div>
            
            <div class="chat-input-container">
                <input 
                    type="text" 
                    id="messageInput" 
                    placeholder="Type a message..." 
                    autocomplete="off"
                >
                <div class="input-actions">
                    <div class="input-action" id="aiButton">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="input-action" id="emojiButton">
                        <i class="fas fa-smile"></i>
                    </div>
                </div>
                <div class="send-btn" id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                </div>
            </div>
        </div>
    </div>
    
    <div class="ban-list" id="banList">
        <div class="ban-list-header">
            <h3>Select User to Ban</h3>
            <button class="ban-list-close" id="banListClose">&times;</button>
        </div>
        <div class="ban-users" id="banUsers">
            <!-- Users will be populated here -->
        </div>
    </div>
    
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Delete Message</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this message? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
    
    <div class="modal" id="suspendModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Suspend User</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to suspend this user? They will be unable to use the platform until unsuspended.</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmSuspend">Suspend</button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get user data from server
            const userId = '<%= user ? user._id : "" %>';
            const username = '<%= user ? user.username : "" %>';
            const profile = {
                name: '<%= user && user.profile ? user.profile.name : user ? user.username : "" %>',
                profilePic: '<%= user && user.profile && user.profile.profilePic ? user.profile.profilePic : "" %>'
            };
            const isAdmin = <%= user && user.isAdmin ? 'true' : 'false' %>;
            const isSuperAdmin = <%= user && user.isSuperAdmin ? 'true' : 'false' %>;
            
            // Initialize socket connection
            const socket = io({
                auth: {
                    token: "user-token"
                }
            });
            
            // Join community chat room
            socket.emit('join-community', userId);
            
            // DOM elements
            const messagesContainer = document.getElementById('messages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const typingIndicator = document.getElementById('typingIndicator');
            const aiButton = document.getElementById('aiButton');
            const aiPanel = document.getElementById('aiPanel');
            const commandSuggestion = document.getElementById('commandSuggestion');
            const banList = document.getElementById('banList');
            const banUsers = document.getElementById('banUsers');
            const banListClose = document.getElementById('banListClose');
            
            // Track typing status
            let typingTimeout;
            const TYPING_DELAY = 1000;
            
            // Track message deletion
            let messageToDelete = null;
            
            // Message editing state
            let editingMessageId = null;
            
            // Initialize messages from server if available
            const initialMessages = [];
            // In a real app, you would fetch initial messages from the server
            // For now, we'll just show a welcome message
            
            // Add welcome message
            addSystemMessage("Welcome to Contact Gain Community Chat! Type /help to see available commands.");
            
            // Socket event listeners
            socket.on('connect', () => {
                console.log('Connected to server');
            });
            
            socket.on('community-message', (message) => {
                addMessage(message, false);
                scrollToBottom();
            });
            
            socket.on('community-message-updated', (message) => {
                updateMessage(message);
            });
            
            socket.on('community-message-deleted', (messageId) => {
                deleteMessage(messageId);
            });
            
            socket.on('community-chat-cleared', () => {
                messagesContainer.innerHTML = '';
                addSystemMessage("Chat history has been cleared by an admin.");
                scrollToBottom();
            });
            
            socket.on('community-typing', (data) => {
                if (data.isTyping && data.userId !== userId) {
                    typingIndicator.style.display = 'flex';
                    typingIndicator.querySelector('.typing-text').textContent = `${data.username} is typing...`;
                    
                    // Clear typing indicator after a delay
                    clearTimeout(typingTimeout);
                    typingTimeout = setTimeout(() => {
                        typingIndicator.style.display = 'none';
                    }, 3000);
                } else {
                    typingIndicator.style.display = 'none';
                }
            });
            
            socket.on('ai-response', (data) => {
                if (data.content) {
                    const aiMessage = {
                        _id: 'ai-' + Date.now(),
                        userId: 'ai',
                        content: data.content,
                        createdAt: new Date(),
                        isAI: true
                    };
                    addMessage(aiMessage, false);
                    scrollToBottom();
                }
            });
            
            socket.on('show-ban-list', (users) => {
                // Populate ban list
                banUsers.innerHTML = '';
                users.forEach(user => {
                    const userElement = document.createElement('div');
                    userElement.className = 'ban-user';
                    userElement.dataset.userId = user._id;
                    
                    userElement.innerHTML = `
                        <div class="ban-user-avatar">
                            ${user.profile?.name ? user.profile.name.charAt(0).toUpperCase() : user.username.charAt(0).toUpperCase()}
                        </div>
                        <div class="ban-user-info">
                            <div class="ban-user-name">${user.profile?.name || user.username}</div>
                            <div class="ban-user-status">${user.isSuspended ? 'Suspended' : 'Active'}</div>
                        </div>
                    `;
                    
                    banUsers.appendChild(userElement);
                });
                
                banList.style.display = 'block';
            });
            
            // Input event handlers
            messageInput.addEventListener('input', () => {
                // Send typing indicator
                clearTimeout(typingTimeout);
                socket.emit('typing', {
                    userId: userId,
                    username: username,
                    isTyping: messageInput.value.length > 0
                });
                
                // Show command suggestion if typing a command
                if (messageInput.value.startsWith('/') || messageInput.value.startsWith('@')) {
                    commandSuggestion.style.display = 'block';
                    
                    // Filter commands based on input
                    const input = messageInput.value.toLowerCase();
                    document.querySelectorAll('.command-item').forEach(item => {
                        const command = item.dataset.command.toLowerCase();
                        if (command.includes(input)) {
                            item.style.display = 'block';
                        } else {
                            item.style.display = 'none';
                        }
                    });
                } else {
                    commandSuggestion.style.display = 'none';
                }
                
                // Auto-resize input
                messageInput.style.height = 'auto';
                messageInput.style.height = (messageInput.scrollHeight) + 'px';
            });
            
            messageInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Click event handlers
            sendButton.addEventListener('click', sendMessage);
            
            aiButton.addEventListener('click', () => {
                aiPanel.style.display = aiPanel.style.display === 'none' ? 'block' : 'none';
            });
            
            document.querySelectorAll('.ai-model').forEach(model => {
                model.addEventListener('click', () => {
                    const selectedModel = model.dataset.model;
                    document.querySelectorAll('.ai-model').forEach(m => m.classList.remove('active'));
                    model.classList.add('active');
                    
                    // Hide panel after selection
                    setTimeout(() => {
                        aiPanel.style.display = 'none';
                    }, 200);
                    
                    // Set the model for the next AI request
                    window.aiModel = selectedModel;
                });
            });
            
            document.querySelectorAll('.command-item').forEach(item => {
                item.addEventListener('click', () => {
                    messageInput.value = item.dataset.command + ' ';
                    messageInput.focus();
                    commandSuggestion.style.display = 'none';
                });
            });
            
            banListClose.addEventListener('click', () => {
                banList.style.display = 'none';
            });
            
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('ban-user')) {
                    const userId = e.target.dataset.userId;
                    if (userId && confirm('Are you sure you want to ban this user?')) {
                        socket.emit('ban-user', {
                            adminId: userId,
                            userId: userId
                        });
                        banList.style.display = 'none';
                    }
                }
            });
            
            // Message actions
            document.getElementById('confirmDelete').addEventListener('click', () => {
                if (messageToDelete) {
                    socket.emit('delete-message', {
                        messageId: messageToDelete,
                        userId: userId,
                        isAdmin: isAdmin
                    });
                    document.getElementById('deleteModal').classList.remove('active');
                }
            });
            
            // Helper functions
            function sendMessage() {
                const content = messageInput.value.trim();
                if (content) {
                    // Check for AI command
                    if (content.startsWith('/GTP') || content.startsWith('@AI')) {
                        const query = content.replace('/GTP', '').replace('@AI', '').trim();
                        socket.emit('ai-request', {
                            userId: userId,
                            query: query,
                            model: window.aiModel || 'gpt'
                        });
                        messageInput.value = '';
                        aiPanel.style.display = 'none';
                        return;
                    }
                    
                    // Send regular message
                    socket.emit('send-message', {
                        userId: userId,
                        username: username,
                        profile: profile,
                        content: content
                    });
                    
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                }
            }
            
            function addMessage(message, isSent) {
                // Check if message already exists
                if (document.getElementById(`message-${message._id}`)) {
                    return;
                }
                
                const messageDiv = document.createElement('div');
                messageDiv.id = `message-${message._id}`;
                messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
                
                // Format the message content
                let content = message.content;
                
                // Handle AI responses
                if (message.isAI) {
                    messageDiv.innerHTML = content;
                    messagesContainer.appendChild(messageDiv);
                    return;
                }
                
                // Handle system messages
                if (message.isSystem) {
                    messageDiv.className = 'message received';
                    messageDiv.innerHTML = `
                        <div class="message-content">${content}</div>
                        <div class="message-time">${formatTime(message.createdAt)}</div>
                    `;
                    messagesContainer.appendChild(messageDiv);
                    return;
                }
                
                // Create message HTML
                messageDiv.innerHTML = `
                    <div class="message-header">
                        <div class="message-author">
                            ${isSent ? 'You' : (message.user?.profile?.name || message.user?.username)}
                            ${message.user?.isAdmin ? '<i class="fas fa-star admin-badge"></i>' : ''}
                            ${message.user?.isSuperAdmin ? '<i class="fas fa-star admin-badge"></i><i class="fas fa-star admin-badge"></i>' : ''}
                        </div>
                        <div class="message-actions">
                            <div class="message-action-btn edit-btn" title="Edit">
                                <i class="fas fa-edit"></i>
                            </div>
                            <div class="message-action-btn delete-btn" title="Delete">
                                <i class="fas fa-trash"></i>
                            </div>
                            <div class="message-action-btn reply-btn" title="Reply">
                                <i class="fas fa-reply"></i>
                            </div>
                        </div>
                    </div>
                    <div class="message-content">${content}</div>
                    ${message.edited ? '<div class="message-edited">(edited)</div>' : ''}
                    <div class="message-time">${formatTime(message.createdAt)}</div>
                `;
                
                messagesContainer.appendChild(messageDiv);
                
                // Add event listeners to message actions
                const deleteBtn = messageDiv.querySelector('.delete-btn');
                if (deleteBtn) {
                    deleteBtn.addEventListener('click', () => {
                        messageToDelete = message._id;
                        document.getElementById('deleteModal').classList.add('active');
                    });
                }
                
                const editBtn = messageDiv.querySelector('.edit-btn');
                if (editBtn) {
                    editBtn.addEventListener('click', () => {
                        startEditingMessage(message);
                    });
                }
            }
            
            function startEditingMessage(message) {
                // Only allow editing own messages
                if (message.userId.toString() !== userId) {
                    return;
                }
                
                const messageDiv = document.getElementById(`message-${message._id}`);
                if (!messageDiv) return;
                
                // Create edit form
                const editForm = document.createElement('div');
                editForm.className = 'edit-message-form';
                editForm.innerHTML = `
                    <textarea class="edit-message-textarea">${message.content}</textarea>
                    <div class="edit-message-actions">
                        <button class="edit-message-btn cancel">Cancel</button>
                        <button class="edit-message-btn save">Save</button>
                    </div>
                `;
                
                // Insert form below message
                messageDiv.appendChild(editForm);
                
                // Set focus to textarea
                const textarea = editForm.querySelector('.edit-message-textarea');
                textarea.focus();
                
                // Cancel button
                editForm.querySelector('.cancel').addEventListener('click', () => {
                    editForm.remove();
                });
                
                // Save button
                editForm.querySelector('.save').addEventListener('click', () => {
                    const newContent = textarea.value.trim();
                    if (newContent && newContent !== message.content) {
                        socket.emit('edit-message', {
                            messageId: message._id,
                            userId: userId,
                            content: newContent
                        });
                    }
                    editForm.remove();
                });
            }
            
            function updateMessage(message) {
                const messageDiv = document.getElementById(`message-${message._id}`);
                if (messageDiv) {
                    // Update content
                    const contentDiv = messageDiv.querySelector('.message-content');
                    if (contentDiv) {
                        contentDiv.textContent = message.content;
                    }
                    
                    // Add edited indicator
                    let editedIndicator = messageDiv.querySelector('.message-edited');
                    if (!editedIndicator) {
                        editedIndicator = document.createElement('div');
                        editedIndicator.className = 'message-edited';
                        editedIndicator.textContent = '(edited)';
                        messageDiv.querySelector('.message-content').after(editedIndicator);
                    }
                }
            }
            
            function deleteMessage(messageId) {
                const messageDiv = document.getElementById(`message-${messageId}`);
                if (messageDiv) {
                    // Replace content with "This message was deleted"
                    const contentDiv = messageDiv.querySelector('.message-content');
                    if (contentDiv) {
                        contentDiv.className = 'deleted-content';
                        contentDiv.innerHTML = 'This message was deleted';
                        
                        // Remove actions
                        const actions = messageDiv.querySelector('.message-actions');
                        if (actions) {
                            actions.remove();
                        }
                        
                        // Add deleted class
                        messageDiv.classList.add('deleted');
                    }
                }
            }
            
            function addSystemMessage(content) {
                const systemMessage = {
                    _id: 'system-' + Date.now(),
                    isSystem: true,
                    content: content,
                    createdAt: new Date()
                };
                addMessage(systemMessage, false);
            }
            
            function formatTime(date) {
                if (!date) return '';
                const d = new Date(date);
                return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }
            
            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Initial scroll to bottom
            scrollToBottom();
        });
    </script>
</body>
</html>
