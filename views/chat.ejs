<!-- File: Contact-Vcf-main/views/chat.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Community Chat | Contact Gain</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-light: #818cf8;
            --secondary: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #0ea5e9;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #94a3b8;
            --card-bg: #ffffff;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --ai-bg: #1a1a1a;
            --ai-text: #ffffff;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9;
            color: var(--dark);
            display: flex;
            min-height: 100vh;
            animation: fadeIn 0.5s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .sidebar {
            width: 250px;
            background: var(--card-bg);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--gray);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            animation: slideInLeft 0.4s ease-out;
        }

         .nav-link:nth-child(1) { animation-delay: 0.1s; }
         .nav-link:nth-child(2) { animation-delay: 0.2s; }
         .nav-link:nth-child(3) { animation-delay: 0.3s; }
         /* ... */

        @keyframes slideInLeft {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .nav-link:hover, .nav-link.active {
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary);
        }

        .nav-link i {
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
            margin-right: 0.75rem;
        }

        .user-section {
            margin-top: auto;
            padding-top: 1rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: white;
            position: relative;
            overflow: hidden;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(99, 102, 241, 0); }
            100% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0); }
        }

         .user-avatar img {
             width: 100%;
             height: 100%;
             border-radius: 50%;
             object-fit: cover;
         }

        .online-dot {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 10px;
            height: 10px;
            background: var(--secondary);
            border-radius: 50%;
            border: 2px solid var(--card-bg);
        }

        .user-details {
            flex-grow: 1;
        }

        .user-name {
            font-weight: 600;
            margin-bottom: 0.2rem;
            font-size: 0.95rem;
        }

        .user-email {
            font-size: 0.8rem;
            color: var(--gray);
        }

        .logout-btn {
            display: block;
            width: 100%;
            text-align: center;
            padding: 0.6rem;
            margin-top: 1rem;
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger);
            border-radius: 8px;
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
            animation: fadeIn 0.5s ease-in-out 0.4s both;
        }

        .logout-btn:hover {
            background: rgba(239, 68, 68, 0.2);
            transform: translateY(-2px);
        }

        .main-content {
            flex-grow: 1;
            padding: 2rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            animation: slideInDown 0.5s ease-out;
        }

        @keyframes slideInDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
        }

        .messages-container {
            flex-grow: 1;
            height: 500px;
            overflow-y: auto;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            margin-bottom: 1rem;
            scroll-behavior: smooth;
        }

        .message {
            display: flex;
            gap: 1rem;
            max-width: 80%;
            opacity: 0;
            transform: translateY(10px);
            animation: messageAppear 0.3s forwards;
        }

        @keyframes messageAppear {
            to { opacity: 1; transform: translateY(0); }
        }

        .message.received { align-self: flex-start; }
        .message.sent { align-self: flex-end; flex-direction: row-reverse; }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            flex-shrink: 0;
        }

        .message-content {
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.3rem;
        }

        .message-username {
            font-weight: 600;
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }

        .admin-badge {
            background: var(--info);
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-size: 0.7rem;
            margin-right: 0.5rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: var(--gray);
        }

        .message-text {
            padding: 0.75rem 1rem;
            border-radius: 18px;
            word-break: break-word;
            position: relative;
            transition: background-color 0.2s ease;
        }

        .message.received .message-text {
            background: #e2e8f0;
            border-top-left-radius: 4px;
        }

        .message.sent .message-text {
            background: var(--primary);
            color: white;
            border-top-right-radius: 4px;
        }

        .ai-response {
            background: var(--ai-bg) !important;
            color: var(--ai-text) !important;
            border-radius: 12px !important;
            padding: 15px !important;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            border: 1px solid #444;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
        }

        .message.deleted .message-text {
            background: #f1f5f9 !important;
            color: var(--gray) !important;
            font-style: italic;
            text-align: center;
            padding: 0.5rem 1rem !important;
        }

        .message.deleted .message-username,
        .message.deleted .message-time,
        .message.deleted .admin-badge {
            color: var(--gray) !important;
        }

        .message-content:hover .message-actions {
            display: flex;
            opacity: 1;
            transform: translateY(0);
        }

        .message-actions {
            display: none;
            position: absolute;
            top: -35px;
            right: 10px;
            background: white;
            border-radius: 6px;
            box-shadow: var(--card-shadow);
            z-index: 10;
            padding: 5px;
            opacity: 0;
            transform: translateY(5px);
            transition: all 0.2s ease;
        }

        .message-action-btn {
            background: none;
            border: none;
            padding: 5px 8px;
            cursor: pointer;
            font-size: 0.9rem;
            color: var(--gray);
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        .message-action-btn:hover {
            color: var(--primary);
            background-color: #f0f0f0;
        }

        .input-area {
            display: flex;
            gap: 0.8rem;
            background: white;
            padding: 1rem;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            animation: slideInUp 0.5s ease-out;
        }

        @keyframes slideInUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .message-input {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
        }
        .message-input:focus {
            border-color: var(--primary);
        }

        .send-btn, .ai-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .send-btn:hover, .ai-btn:hover {
            background: var(--primary-light);
            transform: scale(1.05);
        }

        .typing-indicator {
            font-size: 0.9rem;
            color: var(--gray);
            font-style: italic;
            margin-top: 0.5rem;
            padding-left: 1rem;
            animation: fadeIn 0.5s ease-in-out;
        }

        .ai-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            animation: fadeIn 0.3s ease-out;
        }

        .ai-modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 90%;
            max-width: 500px;
            border-radius: 10px;
            position: relative;
            animation: slideInDown 0.4s ease-out;
        }

        .close-ai-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            top: 10px;
            right: 15px;
            transition: color 0.2s ease;
        }

        .close-ai-modal:hover,
        .close-ai-modal:focus {
            color: black;
        }

        .ai-command-list {
            list-style-type: none;
            padding: 0;
            margin-top: 30px;
        }

        .ai-command-item {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background-color 0.2s ease;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        .ai-command-item:last-child { border-bottom: none; }
        .ai-command-item:hover {
            background-color: #f0f0f0;
            transform: translateX(5px);
        }
        .ai-command-name {
            font-weight: bold;
            color: var(--primary);
        }
        .ai-command-desc {
            font-size: 0.9em;
            color: #666;
        }

        @media (max-width: 768px) {
            .sidebar { width: 70px; }
            .nav-link span, .user-details, .logout-btn span { display: none; }
            .nav-link i { margin-right: 0; text-align: center; width: 100%; }
            .user-avatar { width: 30px; height: 30px; }
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <a href="/terminal" class="nav-link"><i class="fas fa-home"></i> <span>Dashboard</span></a>
        <a href="/chat" class="nav-link active"><i class="fas fa-comments"></i> <span>Community Chat</span></a>
        <a href="/profile" class="nav-link"><i class="fas fa-user"></i> <span>My Profile</span></a>
        <a href="/api-docs" class="nav-link"><i class="fas fa-code"></i> <span>API Docs</span></a>

        <div class="user-section">
            <div class="user-info">
                <div class="user-avatar">
                     <% if (currentUser.profile && currentUser.profile.profilePic) { %>
                         <img src="<%= currentUser.profile.profilePic %>" alt="Profile">
                     <% } else { %>
                         <%= currentUser.username.charAt(0).toUpperCase() %>
                     <% } %>
                    <div class="online-dot" id="currentUserOnlineDot"></div>
                </div>
                <div class="user-details">
                    <div class="user-name"><%= currentUser.username %></div>
                    <div class="user-email"><%= currentUser.email %></div>
                </div>
            </div>
            <form action="/logout" method="POST">
                 <button type="submit" class="logout-btn"><i class="fas fa-sign-out-alt"></i> <span>Logout</span></button>
            </form>
        </div>
    </div>

    <div class="main-content">
        <div class="chat-header">
            <h2 class="section-title">Community Chat</h2>
        </div>

        <div class="messages-container" id="messagesContainer"></div>

        <div class="typing-indicator" id="typingIndicator"></div>

        <div class="input-area">
            <button class="ai-btn" id="aiCommandBtn" title="AI Commands"><i class="fas fa-hashtag"></i></button>
            <input type="text" class="message-input" id="messageInput" placeholder="Type a message...">
            <button class="send-btn" id="sendBtn" title="Send"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>

    <div id="aiModal" class="ai-modal">
        <div class="ai-modal-content">
            <span class="close-ai-modal">&times;</span>
            <h3>AI Commands</h3>
             <ul class="ai-command-list" id="aiCommandList"></ul>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        const typingIndicator = document.getElementById('typingIndicator');
        const aiModal = document.getElementById('aiModal');
        const aiCommandBtn = document.getElementById('aiCommandBtn');
        const closeAiModal = document.querySelector('.close-ai-modal');
        const aiCommandList = document.getElementById('aiCommandList');

        let typingTimeout;

        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function formatTime(date) {
             return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
         }

        function populateAICommands() {
             const commands = [
                 { name: '/gpt', desc: 'Ask ChatGPT a question.' },
                 { name: '/llama3', desc: 'Ask Llama 3 a question.' },
                 { name: '/deepseek-v3', desc: 'Ask DeepSeek V3 a question.' },
                 { name: '/deepseek-r1', desc: 'Ask DeepSeek R1 a question.' },
                 { name: '/metaai', desc: 'Ask Meta AI a question.' },
                 { name: '/gpt4', desc: 'Ask GPT-4 a question.' },
                 { name: '/claude', desc: 'Ask Claude Sonnet a question.' },
                 { name: '/uncensored', desc: 'Ask Uncensored AI a question.' },
                 { name: '/pixtral', desc: 'Ask Pixtral a question.' },
                 { name: '/gemma', desc: 'Ask Gemma a question.' },
                 { name: '/qvq', desc: 'Ask QVQ 72B Preview a question.' },
                 { name: '/queen2', desc: 'Ask Queen2 Coder a question.' },
                 { name: '/gemini', desc: 'Ask Gemini a question.' },
                 { name: '/geminipro', desc: 'Ask Gemini Pro a question.' },
                 { name: '/turbo', desc: 'Ask GPT Turbo a question.' },
                 { name: '/letmegpt', desc: 'Ask Letme GPT a question.' },
                 { name: '/simsimi', desc: 'Ask Simsimi a question.' },
                 { name: '/luminai', desc: 'Ask Lumin AI a question.' },
                 { name: '/wwdgpt', desc: 'Ask Wwd Gpt a question.' }
                 // Add more as integrated in backend
             ];

             aiCommandList.innerHTML = '';
             commands.forEach(cmd => {
                 const li = document.createElement('li');
                 li.className = 'ai-command-item';
                 li.dataset.command = cmd.name;
                 li.innerHTML = `<div class="ai-command-name">${cmd.name}</div><div class="ai-command-desc">${cmd.desc}</div>`;
                 li.addEventListener('click', () => {
                     messageInput.value = cmd.name + ' ';
                     aiModal.style.display = 'none';
                     messageInput.focus();
                 });
                 aiCommandList.appendChild(li);
             });
         }

        aiCommandBtn.addEventListener('click', () => {
            populateAICommands();
            aiModal.style.display = 'block';
        });

        closeAiModal.addEventListener('click', () => { aiModal.style.display = 'none'; });
        window.addEventListener('click', (event) => {
            if (event.target === aiModal) aiModal.style.display = 'none';
        });

        function sendMessage() {
            const content = messageInput.value.trim();
            if (content) {
                socket.emit('sendMessage', { content: content });
                messageInput.value = '';
                clearTimeout(typingTimeout);
                socket.emit('typing', { isTyping: false });
            }
        }

        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
            else {
                socket.emit('typing', { isTyping: true });
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    socket.emit('typing', { isTyping: false });
                }, 1000);
            }
        });

        socket.on('receiveMessage', (data) => {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${data.isCurrentUser ? 'sent' : 'received'}`;
            messageElement.dataset.messageId = data._id;

            const isDeleted = data.isDeleted;
            const deletedByAdmin = data.deletedByAdmin;
            const messageClass = isDeleted ? 'deleted' : '';

            const messageTime = data.timestamp ? new Date(data.timestamp) : new Date();
            const formattedTime = formatTime(messageTime);

            const avatarContent = data.user.profile && data.user.profile.profilePic ?
                `<img src="${data.user.profile.profilePic}" alt="Profile">` :
                data.user.username.charAt(0).toUpperCase();

            const adminBadge = data.user.isAdmin ? '<span class="admin-badge">Admin</span>' : '';

            messageElement.innerHTML = `
                <div class="message-avatar">${avatarContent}</div>
                <div class="message-content">
                    <div class="message-header">
                        <div class="message-username">${data.user.username}</div>
                        ${adminBadge}
                        <div class="message-time">${formattedTime}</div>
                    </div>
                    <div class="message-text ${messageClass}">
                        ${isDeleted ?
                            (deletedByAdmin ? 'This message was deleted by admin' : 'This message was deleted') :
                            (data.isAIResponse ?
                                `<div class="ai-response">${data.content.replace(/\n/g, '<br>')}</div>` :
                                data.content.replace(/\n/g, '<br>')
                            )
                        }
                        ${!isDeleted ? `
                            <div class="message-actions">
                                <button class="message-action-btn copy-btn" title="Copy"><i class="fas fa-copy"></i></button>
                                <button class="message-action-btn reply-btn" title="Reply"><i class="fas fa-reply"></i></button>
                                ${data.isCurrentUser || data.currentUserIsAdmin ?
                                    `<button class="message-action-btn delete-btn" title="Delete"><i class="fas fa-trash"></i></button>` : ''
                                }
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageElement);

            if (!isDeleted) {
                const copyBtn = messageElement.querySelector('.copy-btn');
                const replyBtn = messageElement.querySelector('.reply-btn');
                const deleteBtn = messageElement.querySelector('.delete-btn');

                if (copyBtn) {
                    copyBtn.addEventListener('click', () => {
                        navigator.clipboard.writeText(data.content).then(() => {
                             copyBtn.innerHTML = '<i class="fas fa-check"></i>';
                             setTimeout(() => {
                                 copyBtn.innerHTML = '<i class="fas fa-copy"></i>';
                             }, 1000);
                        }).catch(err => console.error('Failed to copy:', err));
                    });
                }

                if (replyBtn) {
                    replyBtn.addEventListener('click', () => {
                        const replyText = `@${data.user.username} `;
                        messageInput.value = replyText;
                        messageInput.focus();
                    });
                }

                if (deleteBtn) {
                    deleteBtn.addEventListener('click', () => {
                        if (confirm('Are you sure you want to delete this message?')) {
                            socket.emit('deleteMessage', { messageId: data._id });
                        }
                    });
                }
            }

            scrollToBottom();
        });

        socket.on('messageDeleted', (data) => {
             const msgElement = document.querySelector(`.message[data-message-id="${data._id}"]`);
             if (msgElement) {
                 const textElement = msgElement.querySelector('.message-text');
                 if (textElement) {
                     textElement.classList.add('deleted');
                     textElement.innerHTML = data.deletedByAdmin ? 'This message was deleted by admin' : 'This message was deleted';
                     // Remove action buttons
                     const actions = msgElement.querySelector('.message-actions');
                     if (actions) actions.remove();
                 }
             }
         });

        socket.on('typing', (data) => {
            typingIndicator.textContent = data.isTyping ? `${data.user.username} is typing...` : '';
        });

        socket.on('errorMessage', (data) => {
             alert(data.message); // Or display in a nicer way
         });

        scrollToBottom();
    </script>
</body>
</html>
