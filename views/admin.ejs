<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard | Contact Gain</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-light: #818cf8;
            --secondary: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #0ea5e9;
            --dark: #0f172a;
            --light: #f8fafc;
            --gray: #94a3b8;
            --card-bg: #1e293b;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --glass: rgba(15, 23, 42, 0.85);
            --border: rgba(255, 255, 255, 0.1);
            --success: #10b981;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        
        body {
            background-color: var(--dark);
            color: var(--light);
            min-height: 100vh;
            display: flex;
        }
        
        #particles-js {
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
        }
        
        .sidebar {
            width: 280px;
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-right: 1px solid var(--border);
            height: 100vh;
            overflow-y: auto;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.25rem;
            font-weight: 700;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            color: white;
            text-decoration: none;
        }
        
        .logo span:first-child {
            color: var(--primary);
        }
        
        .nav-links {
            padding: 1.5rem 0;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem 1.5rem;
            color: var(--gray);
            text-decoration: none;
            transition: all 0.2s ease;
            border-left: 3px solid transparent;
        }
        
        .nav-link:hover, .nav-link.active {
            color: var(--primary);
            background: rgba(99, 102, 241, 0.1);
            border-left: 3px solid var(--primary);
        }
        
        .nav-link i {
            width: 24px;
            text-align: center;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow-y: auto;
        }
        
        .header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header-title {
            font-size: 1.75rem;
            font-weight: 700;
        }
        
        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            position: relative;
        }
        
        .user-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .user-avatar.super-admin::after {
            content: '';
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            background: gold;
            border: 2px solid var(--dark);
            border-radius: 50%;
        }
        
        .user-avatar.super-admin::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 12px;
            height: 12px;
            background: gold;
            border: 2px solid var(--dark);
            border-radius: 50%;
        }
        
        .container {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            border: 1px solid var(--border);
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }
        
        .stat-icon.users {
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary);
        }
        
        .stat-icon.sessions {
            background: rgba(14, 165, 233, 0.1);
            color: var(--info);
        }
        
        .stat-icon.contacts {
            background: rgba(16, 185, 129, 0.1);
            color: var(--secondary);
        }
        
        .stat-icon.downloads {
            background: rgba(245, 158, 11, 0.1);
            color: var(--warning);
        }
        
        .stat-title {
            font-size: 0.9rem;
            color: var(--gray);
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 500;
        }
        
        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 0.5rem 0;
        }
        
        .stat-change {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85rem;
        }
        
        .stat-change.positive {
            color: var(--success);
        }
        
        .stat-change.negative {
            color: var(--danger);
        }
        
        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 1.5rem;
        }
        
        .card {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            border: 1px solid var(--border);
            margin-bottom: 1.5rem;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.25rem;
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .card-action {
            color: var(--primary);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .card-action:hover {
            text-decoration: underline;
        }
        
        .users-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .user-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-radius: 12px;
            background: rgba(30, 41, 59, 0.5);
            border: 1px solid var(--border);
            transition: all 0.2s ease;
        }
        
        .user-item:hover {
            transform: translateX(5px);
            border-color: var(--primary);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .user-avatar-small {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            position: relative;
        }
        
        .user-avatar-small img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }
        
        .user-avatar-small.super-admin::after {
            content: '';
            position: absolute;
            bottom: 0;
            right: 0;
            width: 10px;
            height: 10px;
            background: gold;
            border: 2px solid var(--dark);
            border-radius: 50%;
        }
        
        .user-avatar-small.super-admin::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 10px;
            height: 10px;
            background: gold;
            border: 2px solid var(--dark);
            border-radius: 50%;
        }
        
        .user-details {
            display: flex;
            flex-direction: column;
        }
        
        .user-name {
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .user-username {
            color: var(--gray);
            font-size: 0.85rem;
        }
        
        .user-status {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85rem;
        }
        
        .user-status.online {
            color: var(--success);
        }
        
        .user-actions {
            display: flex;
            gap: 0.75rem;
        }
        
        .user-action {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .user-action:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .user-action.suspend {
            color: var(--warning);
        }
        
        .user-action.ban {
            color: var(--danger);
        }
        
        .user-action.admin {
            color: var(--info);
        }
        
        .session-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .session-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-radius: 12px;
            background: rgba(30, 41, 59, 0.5);
            border: 1px solid var(--border);
            transition: all 0.2s ease;
        }
        
        .session-item:hover {
            transform: translateX(5px);
            border-color: var(--primary);
        }
        
        .session-info {
            display: flex;
            flex-direction: column;
        }
        
        .session-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }
        
        .session-id {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .session-timer {
            font-size: 0.85rem;
            color: var(--warning);
        }
        
        .session-actions {
            display: flex;
            gap: 0.75rem;
        }
        
        .session-action {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.05);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray);
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .session-action:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .session-action.delete {
            color: var(--danger);
        }
        
        .session-action.edit {
            color: var(--info);
        }
        
        .admin-tutorial {
            background: rgba(99, 102, 241, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid var(--border);
            margin-bottom: 1.5rem;
        }
        
        .tutorial-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }
        
        .tutorial-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: rgba(99, 102, 241, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
            font-size: 1.25rem;
        }
        
        .tutorial-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .tutorial-content {
            line-height: 1.6;
            color: var(--gray);
        }
        
        .tutorial-steps {
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        
        .tutorial-step {
            display: flex;
            gap: 0.75rem;
        }
        
        .step-number {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.85rem;
        }
        
        .step-content {
            flex: 1;
        }
        
        .step-title {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }
        
        .step-desc {
            font-size: 0.85rem;
            color: var(--gray);
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            max-width: 200px;
            margin-left: 1rem;
            display: none;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--gray);
            border-radius: 50%;
            animation: typing 1.5s infinite;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typing {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        /* Modals */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background: var(--glass);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            width: 500px;
            max-width: 90%;
            border: 1px solid var(--border);
            overflow: hidden;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--gray);
            cursor: pointer;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }
        
        .modal-close:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--light);
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
        
        .modal-btn {
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-size: 1rem;
        }
        
        .modal-btn.cancel {
            background: rgba(255, 255, 255, 0.05);
            color: var(--light);
        }
        
        .modal-btn.cancel:hover {
            background: rgba(255, 255, 255, 0.1);
        }
        
        .modal-btn.confirm {
            background: var(--primary);
            color: white;
        }
        
        .modal-btn.confirm:hover {
            background: var(--primary-light);
        }
        
        .ai-response {
            background: rgba(14, 165, 233, 0.1);
            border-left: 3px solid var(--info);
            border-radius: 8px;
            overflow: hidden;
            margin-top: 1.5rem;
        }
        
        .ai-header {
            padding: 0.75rem;
            background: rgba(14, 165, 233, 0.15);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }
        
        .ai-content {
            padding: 1rem;
            line-height: 1.6;
        }
        
        .ai-content pre {
            background: rgba(0, 0, 0, 0.2);
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            font-family: monospace;
            font-size: 0.9rem;
            line-height: 1.5;
            color: var(--light);
            margin: 0;
        }
        
        .ai-footer {
            padding: 0.75rem;
            text-align: right;
            font-size: 0.85rem;
            color: var(--gray);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .animate-fade-in {
            animation: fadeIn 0.3s ease forwards;
        }
        
        /* Responsive */
        @media (max-width: 992px) {
            .sidebar {
                width: 80px;
            }
            
            .logo span, .nav-link span {
                display: none;
            }
            
            .logo i, .nav-link i {
                font-size: 1.25rem;
            }
            
            .content-grid {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div id="particles-js"></div>
    
    <div class="sidebar">
        <a href="/" class="logo">
            <i class="fas fa-bolt"></i>
            <div class="logo-text">
                <span>Contact</span>
                <span>Gain</span>
            </div>
        </a>
        
        <div class="nav-links">
            <a href="/dashboard" class="nav-link">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </a>
            <a href="/admin" class="nav-link active">
                <i class="fas fa-user-shield"></i>
                <span>Admin Panel</span>
            </a>
            <a href="/chat" class="nav-link">
                <i class="fas fa-comments"></i>
                <span>Community Chat</span>
            </a>
            <a href="/create-session" class="nav-link">
                <i class="fas fa-address-book"></i>
                <span>Create Session</span>
            </a>
            <a href="/api" class="nav-link">
                <i class="fas fa-code"></i>
                <span>API Documentation</span>
            </a>
            <a href="/profile/<%= user ? user._id : '' %>" class="nav-link">
                <i class="fas fa-user"></i>
                <span>Profile</span>
            </a>
            <a href="/logout" class="nav-link">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </a>
        </div>
    </div>
    
    <div class="main-content">
        <div class="header">
            <h1 class="header-title">Admin Dashboard</h1>
            <div class="user-menu">
                <div class="user-avatar <%= user && user.isSuperAdmin ? 'super-admin' : '' %>">
                    <% if (user && user.profile && user.profile.profilePic) { %>
                        <img src="<%= user.profile.profilePic %>" alt="<%= user.username %>">
                    <% } else { %>
                        <%= user ? user.username.charAt(0).toUpperCase() : 'U' %>
                    <% } %>
                </div>
                <div>
                    <div><%= user ? user.username : 'User' %></div>
                    <div style="font-size: 0.8rem; color: <%= user && user.isSuperAdmin ? 'gold' : (user && user.isAdmin ? 'var(--info)' : 'var(--gray)') %>;">
                        <%= user && user.isSuperAdmin ? 'Super Admin' : (user && user.isAdmin ? 'Admin' : 'User') %>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="container">
            <div class="admin-tutorial">
                <div class="tutorial-header">
                    <div class="tutorial-icon">
                        <i class="fas fa-info-circle"></i>
                    </div>
                    <h2 class="tutorial-title">Admin Panel Tutorial</h2>
                </div>
                <div class="tutorial-content">
                    Welcome to the Contact Gain Admin Panel! Here's how to use the admin features:
                </div>
                <div class="tutorial-steps">
                    <div class="tutorial-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <div class="step-title">User Management</div>
                            <div class="step-desc">View all users, suspend/unsuspend accounts, promote to admin, and ban users.</div>
                        </div>
                    </div>
                    <div class="tutorial-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <div class="step-title">Session Management</div>
                            <div class="step-desc">Monitor active sessions, delete sessions, and view session details.</div>
                        </div>
                    </div>
                    <div class="tutorial-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <div class="step-title">Community Chat</div>
                            <div class="step-desc">Monitor community chat, clear chat history, tag all members, and use admin commands.</div>
                        </div>
                    </div>
                    <div class="tutorial-step">
                        <div class="step-number">4</div>
                        <div class="step-content">
                            <div class="step-title">AI Assistant</div>
                            <div class="step-desc">Use the AI assistant to get help with admin tasks and system information.</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Total Users</div>
                        <div class="stat-icon users">
                            <i class="fas fa-users"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= totalUsers %></div>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i> 5% from last week
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Active Sessions</div>
                        <div class="stat-icon sessions">
                            <i class="fas fa-address-book"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= totalSessions %></div>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i> 12% from last week
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Total Contacts</div>
                        <div class="stat-icon contacts">
                            <i class="fas fa-address-card"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= totalContacts %></div>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i> 8% from last week
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-header">
                        <div class="stat-title">Total Downloads</div>
                        <div class="stat-icon downloads">
                            <i class="fas fa-download"></i>
                        </div>
                    </div>
                    <div class="stat-value"><%= totalDownloads %></div>
                    <div class="stat-change positive">
                        <i class="fas fa-arrow-up"></i> 15% from last week
                    </div>
                </div>
            </div>
            
            <div class="content-grid">
                <div class="users-section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Users Management</h2>
                            <div class="card-action" id="refreshUsers">Refresh</div>
                        </div>
                        
                        <div class="users-list" id="usersList">
                            <% users.forEach(user => { %>
                                <div class="user-item" data-user-id="<%= user._id %>">
                                    <div class="user-info">
                                        <div class="user-avatar-small <%= user.isSuperAdmin ? 'super-admin' : '' %>">
                                            <% if (user.profile && user.profile.profilePic) { %>
                                                <img src="<%= user.profile.profilePic %>" alt="<%= user.username %>">
                                            <% } else { %>
                                                <%= user.username.charAt(0).toUpperCase() %>
                                            <% } %>
                                        </div>
                                        <div class="user-details">
                                            <div class="user-name">
                                                <%= user.profile?.name || user.username %>
                                                <% if (user.isAdmin) { %>
                                                    <i class="fas fa-check-circle" style="color: var(--info);"></i>
                                                <% } %>
                                                <% if (user.isSuperAdmin) { %>
                                                    <i class="fas fa-star" style="color: gold;"></i>
                                                    <i class="fas fa-star" style="color: gold;"></i>
                                                <% } %>
                                            </div>
                                            <div class="user-username">@<%= user.username %></div>
                                            <div class="user-status <%= user.lastSeen && (new Date() - new Date(user.lastSeen)) < 300000 ? 'online' : '' %>">
                                                <i class="fas <%= user.lastSeen && (new Date() - new Date(user.lastSeen)) < 300000 ? 'fa-circle' : 'fa-clock' %>"></i>
                                                <%= user.lastSeen && (new Date() - new Date(user.lastSeen)) < 300000 ? 'Online' : 
                                                   user.lastSeen ? `Last seen ${new Date(user.lastSeen).toLocaleDateString()}` : 'Never' %>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="user-actions">
                                        <% if (user.isSuspended) { %>
                                            <div class="user-action unsuspend" title="Unsuspend User" data-user-id="<%= user._id %>">
                                                <i class="fas fa-play"></i>
                                            </div>
                                        <% } else { %>
                                            <div class="user-action suspend" title="Suspend User" data-user-id="<%= user._id %>">
                                                <i class="fas fa-pause"></i>
                                            </div>
                                        <% } %>
                                        
                                        <% if (!user.isSuperAdmin) { %>
                                            <% if (user.isAdmin) { %>
                                                <div class="user-action admin" title="Remove Admin" data-user-id="<%= user._id %>">
                                                    <i class="fas fa-user-minus"></i>
                                                </div>
                                            <% } else { %>
                                                <div class="user-action admin" title="Make Admin" data-user-id="<%= user._id %>">
                                                    <i class="fas fa-user-plus"></i>
                                                </div>
                                            <% } %>
                                            
                                            <div class="user-action ban" title="Ban User" data-user-id="<%= user._id %>">
                                                <i class="fas fa-ban"></i>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Active Sessions</h2>
                            <div class="card-action" id="refreshSessions">Refresh</div>
                        </div>
                        
                        <div class="session-list" id="sessionsList">
                            <% sessions.forEach(session => { %>
                                <div class="session-item" data-session-id="<%= session.sessionId %>">
                                    <div class="session-info">
                                        <div class="session-name"><%= session.groupName %></div>
                                        <div class="session-id">ID: <%= session.sessionId %></div>
                                        <div class="session-timer"><i class="fas fa-clock"></i> <%= session.timer %> minutes</div>
                                    </div>
                                    
                                    <div class="session-actions">
                                        <div class="session-action edit" title="Edit Session" data-session-id="<%= session.sessionId %>">
                                            <i class="fas fa-edit"></i>
                                        </div>
                                        <div class="session-action delete" title="Delete Session" data-session-id="<%= session.sessionId %>">
                                            <i class="fas fa-trash"></i>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
                
                <div class="sidebar-section">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">Admin Commands</h2>
                        </div>
                        
                        <div class="ai-response">
                            <div class="ai-header">
                                <i class="fas fa-robot"></i> Admin Assistant
                            </div>
                            <div class="ai-content">
                                <pre>╭══〘〘 Contact Gain Bot 〙〙═⊷
┃❍ Prefix: /
┃❍ Owner: @<%= process.env.ADMIN_USERNAME %>
┃❍ Plugins: 25
┃❍ Version: 5.0.0
┃❍ Uptime: 14d 21h 20m 39s
┃❍ Time Now: 03:00:59 pm
┃❍ Date Today: 07/07/2025
┃❍ Time Zone: Africa/Lagos
┃❍ Server RAM: 74.81 GB/125.77 GB
╰═════════════════════════════</pre>
                            </div>
                            <div class="ai-footer">Powered by Contact Gain</div>
                        </div>
                        
                        <div class="tutorial-steps" style="margin-top: 1.5rem;">
                            <div class="tutorial-step">
                                <div class="step-number">1</div>
                                <div class="step-content">
                                    <div class="step-title">/clearchat</div>
                                    <div class="step-desc">Clear all chat messages in the community</div>
                                </div>
                            </div>
                            <div class="tutorial-step">
                                <div class="step-number">2</div>
                                <div class="step-content">
                                    <div class="step-title">/tagall</div>
                                    <div class="step-desc">Tag all members in the community chat</div>
                                </div>
                            </div>
                            <div class="tutorial-step">
                                <div class="step-number">3</div>
                                <div class="step-content">
                                    <div class="step-title">/pin or /unpin</div>
                                    <div class="step-desc">Pin or unpin a message (reply to message)</div>
                                </div>
                            </div>
                            <div class="tutorial-step">
                                <div class="step-number">4</div>
                                <div class="step-content">
                                    <div class="step-title">/delete</div>
                                    <div class="step-desc">Delete a message (reply to message)</div>
                                </div>
                            </div>
                            <div class="tutorial-step">
                                <div class="step-number">5</div>
                                <div class="step-content">
                                    <div class="step-title">/ban</div>
                                    <div class="step-desc">Ban a user (shows user list to select)</div>
                                </div>
                            </div>
                            <div class="tutorial-step">
                                <div class="step-number">6</div>
                                <div class="step-content">
                                    <div class="step-title">@</div>
                                    <div class="step-desc">Shows all commands and features</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title">System Status</h2>
                        </div>
                        
                        <div class="stats-grid" style="grid-template-columns: 1fr; gap: 1rem; margin: 0;">
                            <div class="stat-card">
                                <div class="stat-header">
                                    <div class="stat-title">Server Uptime</div>
                                    <div class="stat-icon sessions">
                                        <i class="fas fa-clock"></i>
                                    </div>
                                </div>
                                <div class="stat-value">14d 21h 20m 39s</div>
                            </div>
                            
                            <div class="stat-card">
                                <div class="stat-header">
                                    <div class="stat-title">Memory Usage</div>
                                    <div class="stat-icon sessions">
                                        <i class="fas fa-memory"></i>
                                    </div>
                                </div>
                                <div class="stat-value">74.81 GB/125.77 GB</div>
                            </div>
                            
                            <div class="stat-card">
                                <div class="stat-header">
                                    <div class="stat-title">Active Users</div>
                                    <div class="stat-icon sessions">
                                        <i class="fas fa-users"></i>
                                    </div>
                                </div>
                                <div class="stat-value">42</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="typing-indicator" id="typingIndicator">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
    </div>
    
    <div class="modal" id="suspendModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="suspendModalTitle">Suspend User</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p id="suspendModalMessage">Are you sure you want to suspend this user? They will be unable to use the platform until unsuspended.</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmSuspend">Suspend</button>
            </div>
        </div>
    </div>
    
    <div class="modal" id="banModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Ban User</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to ban this user? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmBan">Ban</button>
            </div>
        </div>
    </div>
    
    <div class="modal" id="adminModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="adminModalTitle">Change Admin Status</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p id="adminModalMessage">Are you sure you want to change this user's admin status?</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmAdmin">Confirm</button>
            </div>
        </div>
    </div>
    
    <div class="modal" id="deleteSessionModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Delete Session</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this session? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel">Cancel</button>
                <button class="modal-btn confirm" id="confirmDeleteSession">Delete</button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get user data
            const userId = '<%= user ? user._id : "" %>';
            const isAdmin = <%= user && user.isAdmin ? 'true' : 'false' %>;
            const isSuperAdmin = <%= user && user.isSuperAdmin ? 'true' : 'false' %>;
            
            // Initialize socket connection
            const socket = io({
                auth: {
                    token: "admin-token"
                }
            });
            
            // Track current modal action
            let currentAction = {
                type: null,
                userId: null,
                sessionId: null
            };
            
            // DOM elements
            const suspendModal = document.getElementById('suspendModal');
            const banModal = document.getElementById('banModal');
            const adminModal = document.getElementById('adminModal');
            const deleteSessionModal = document.getElementById('deleteSessionModal');
            const confirmSuspend = document.getElementById('confirmSuspend');
            const confirmBan = document.getElementById('confirmBan');
            const confirmAdmin = document.getElementById('confirmAdmin');
            const confirmDeleteSession = document.getElementById('confirmDeleteSession');
            const modalCloseButtons = document.querySelectorAll('.modal-close');
            const cancelButtons = document.querySelectorAll('.modal-btn.cancel');
            
            // Event listeners for modals
            modalCloseButtons.forEach(button => {
                button.addEventListener('click', () => {
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                });
            });
            
            cancelButtons.forEach(button => {
                button.addEventListener('click', () => {
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                });
            });
            
            // User action buttons
            document.querySelectorAll('.suspend').forEach(button => {
                button.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.userId;
                    currentAction = { type: 'suspend', userId };
                    
                    document.getElementById('suspendModalTitle').textContent = 'Suspend User';
                    document.getElementById('suspendModalMessage').textContent = 
                        'Are you sure you want to suspend this user? They will be unable to use the platform until unsuspended.';
                    
                    suspendModal.classList.add('active');
                });
            });
            
            document.querySelectorAll('.unsuspend').forEach(button => {
                button.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.userId;
                    currentAction = { type: 'unsuspend', userId };
                    
                    document.getElementById('suspendModalTitle').textContent = 'Unsuspend User';
                    document.getElementById('suspendModalMessage').textContent = 
                        'Are you sure you want to unsuspend this user? They will regain access to the platform.';
                    
                    suspendModal.classList.add('active');
                });
            });
            
            document.querySelectorAll('.ban').forEach(button => {
                button.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.userId;
                    currentAction = { type: 'ban', userId };
                    banModal.classList.add('active');
                });
            });
            
            document.querySelectorAll('.admin').forEach(button => {
                button.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.userId;
                    const isCurrentAdmin = e.currentTarget.previousElementSibling && 
                                          e.currentTarget.previousElementSibling.classList.contains('fa-user-minus');
                    
                    currentAction = { type: isCurrentAdmin ? 'remove-admin' : 'make-admin', userId };
                    
                    document.getElementById('adminModalTitle').textContent = 
                        isCurrentAdmin ? 'Remove Admin' : 'Make Admin';
                    
                    document.getElementById('adminModalMessage').textContent = 
                        isCurrentAdmin ? 
                        'Are you sure you want to remove admin privileges from this user?' :
                        'Are you sure you want to make this user an admin?';
                    
                    adminModal.classList.add('active');
                });
            });
            
            document.querySelectorAll('.session-action.delete').forEach(button => {
                button.addEventListener('click', (e) => {
                    const sessionId = e.currentTarget.dataset.sessionId;
                    currentAction = { type: 'delete-session', sessionId };
                    deleteSessionModal.classList.add('active');
                });
            });
            
            // Confirm actions
            confirmSuspend.addEventListener('click', () => {
                if (currentAction.userId && currentAction.type) {
                    socket.emit('admin-command', {
                        userId: userId,
                        command: currentAction.type === 'suspend' ? '/suspend' : '/unsuspend',
                        targetUserId: currentAction.userId
                    });
                    
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                }
            });
            
            confirmBan.addEventListener('click', () => {
                if (currentAction.userId) {
                    socket.emit('ban-user', {
                        adminId: userId,
                        userId: currentAction.userId
                    });
                    
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                }
            });
            
            confirmAdmin.addEventListener('click', () => {
                if (currentAction.userId && currentAction.type) {
                    if (currentAction.type === 'make-admin') {
                        socket.emit('admin-command', {
                            userId: userId,
                            command: '/promote',
                            targetUserId: currentAction.userId
                        });
                    } else {
                        socket.emit('admin-command', {
                            userId: userId,
                            command: '/demote',
                            targetUserId: currentAction.userId
                        });
                    }
                    
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                }
            });
            
            confirmDeleteSession.addEventListener('click', () => {
                if (currentAction.sessionId) {
                    fetch(`/admin/session/${currentAction.sessionId}/delete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer admin-token'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove the session from the UI
                            const sessionElement = document.querySelector(`[data-session-id="${currentAction.sessionId}"]`);
                            if (sessionElement) {
                                sessionElement.remove();
                            }
                            
                            // Show success message
                            const successMessage = document.createElement('div');
                            successMessage.className = 'alert success';
                            successMessage.textContent = 'Session deleted successfully';
                            successMessage.style.position = 'fixed';
                            successMessage.style.top = '20px';
                            successMessage.style.right = '20px';
                            successMessage.style.padding = '1rem';
                            successMessage.style.borderRadius = '8px';
                            successMessage.style.backgroundColor = 'rgba(16, 185, 129, 0.1)';
                            successMessage.style.color = '#10b981';
                            successMessage.style.zIndex = '1000';
                            document.body.appendChild(successMessage);
                            
                            setTimeout(() => {
                                successMessage.remove();
                            }, 3000);
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting session:', error);
                    });
                    
                    document.querySelectorAll('.modal').forEach(modal => {
                        modal.classList.remove('active');
                    });
                }
            });
            
            // Refresh buttons
            document.getElementById('refreshUsers').addEventListener('click', () => {
                fetch('/admin/users')
                    .then(response => response.json())
                    .then(data => {
                        const usersList = document.getElementById('usersList');
                        usersList.innerHTML = '';
                        
                        data.users.forEach(user => {
                            const userElement = document.createElement('div');
                            userElement.className = 'user-item';
                            userElement.dataset.userId = user._id;
                            
                            const lastSeen = user.lastSeen ? 
                                (new Date() - new Date(user.lastSeen)) < 300000 ? 
                                    'Online' : 
                                    `Last seen ${new Date(user.lastSeen).toLocaleDateString()}` :
                                'Never';
                            
                            userElement.innerHTML = `
                                <div class="user-info">
                                    <div class="user-avatar-small ${user.isSuperAdmin ? 'super-admin' : ''}">
                                        ${user.profile?.profilePic ? 
                                            `<img src="${user.profile.profilePic}" alt="${user.username}">` : 
                                            user.username.charAt(0).toUpperCase()}
                                    </div>
                                    <div class="user-details">
                                        <div class="user-name">
                                            ${user.profile?.name || user.username}
                                            ${user.isAdmin ? '<i class="fas fa-check-circle" style="color: var(--info);"></i>' : ''}
                                            ${user.isSuperAdmin ? '<i class="fas fa-star" style="color: gold;"></i><i class="fas fa-star" style="color: gold;"></i>' : ''}
                                        </div>
                                        <div class="user-username">@${user.username}</div>
                                        <div class="user-status ${user.lastSeen && (new Date() - new Date(user.lastSeen)) < 300000 ? 'online' : ''}">
                                            <i class="fas ${user.lastSeen && (new Date() - new Date(user.lastSeen)) < 300000 ? 'fa-circle' : 'fa-clock'}"></i>
                                            ${lastSeen}
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="user-actions">
                                    ${user.isSuspended ? 
                                        `<div class="user-action unsuspend" title="Unsuspend User" data-user-id="${user._id}">
                                            <i class="fas fa-play"></i>
                                        </div>` :
                                        `<div class="user-action suspend" title="Suspend User" data-user-id="${user._id}">
                                            <i class="fas fa-pause"></i>
                                        </div>`}
                                    
                                    ${!user.isSuperAdmin ? 
                                        (user.isAdmin ? 
                                            `<div class="user-action admin" title="Remove Admin" data-user-id="${user._id}">
                                                <i class="fas fa-user-minus"></i>
                                            </div>` :
                                            `<div class="user-action admin" title="Make Admin" data-user-id="${user._id}">
                                                <i class="fas fa-user-plus"></i>
                                            </div>`) : ''}
                                    
                                    ${!user.isSuperAdmin ? 
                                        `<div class="user-action ban" title="Ban User" data-user-id="${user._id}">
                                            <i class="fas fa-ban"></i>
                                        </div>` : ''}
                                </div>
                            `;
                            
                            usersList.appendChild(userElement);
                            
                            // Add event listeners to new elements
                            userElement.querySelector('.suspend, .unsuspend').addEventListener('click', (e) => {
                                const userId = e.currentTarget.dataset.userId;
                                currentAction = { 
                                    type: e.currentTarget.classList.contains('suspend') ? 'suspend' : 'unsuspend', 
                                    userId 
                                };
                                
                                document.getElementById('suspendModalTitle').textContent = 
                                    currentAction.type === 'suspend' ? 'Suspend User' : 'Unsuspend User';
                                
                                document.getElementById('suspendModalMessage').textContent = 
                                    currentAction.type === 'suspend' ? 
                                        'Are you sure you want to suspend this user? They will be unable to use the platform until unsuspended.' :
                                        'Are you sure you want to unsuspend this user? They will regain access to the platform.';
                                
                                suspendModal.classList.add('active');
                            });
                            
                            if (!user.isSuperAdmin) {
                                userElement.querySelector('.admin').addEventListener('click', (e) => {
                                    const userId = e.currentTarget.dataset.userId;
                                    const isCurrentAdmin = e.currentTarget.previousElementSibling && 
                                                          e.currentTarget.previousElementSibling.classList.contains('fa-user-minus');
                                    
                                    currentAction = { 
                                        type: isCurrentAdmin ? 'remove-admin' : 'make-admin', 
                                        userId 
                                    };
                                    
                                    document.getElementById('adminModalTitle').textContent = 
                                        isCurrentAdmin ? 'Remove Admin' : 'Make Admin';
                                    
                                    document.getElementById('adminModalMessage').textContent = 
                                        isCurrentAdmin ? 
                                            'Are you sure you want to remove admin privileges from this user?' :
                                            'Are you sure you want to make this user an admin?';
                                    
                                    adminModal.classList.add('active');
                                });
                                
                                userElement.querySelector('.ban').addEventListener('click', (e) => {
                                    const userId = e.currentTarget.dataset.userId;
                                    currentAction = { type: 'ban', userId };
                                    banModal.classList.add('active');
                                });
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Error refreshing users:', error);
                    });
            });
            
            document.getElementById('refreshSessions').addEventListener('click', () => {
                fetch('/admin/sessions')
                    .then(response => response.json())
                    .then(data => {
                        const sessionsList = document.getElementById('sessionsList');
                        sessionsList.innerHTML = '';
                        
                        data.sessions.forEach(session => {
                            const sessionElement = document.createElement('div');
                            sessionElement.className = 'session-item';
                            sessionElement.dataset.sessionId = session.sessionId;
                            
                            sessionElement.innerHTML = `
                                <div class="session-info">
                                    <div class="session-name">${session.groupName}</div>
                                    <div class="session-id">ID: ${session.sessionId}</div>
                                    <div class="session-timer"><i class="fas fa-clock"></i> ${session.timer} minutes</div>
                                </div>
                                
                                <div class="session-actions">
                                    <div class="session-action edit" title="Edit Session" data-session-id="${session.sessionId}">
                                        <i class="fas fa-edit"></i>
                                    </div>
                                    <div class="session-action delete" title="Delete Session" data-session-id="${session.sessionId}">
                                        <i class="fas fa-trash"></i>
                                    </div>
                                </div>
                            `;
                            
                            sessionsList.appendChild(sessionElement);
                            
                            // Add event listeners to new elements
                            sessionElement.querySelector('.session-action.delete').addEventListener('click', (e) => {
                                const sessionId = e.currentTarget.dataset.sessionId;
                                currentAction = { type: 'delete-session', sessionId };
                                deleteSessionModal.classList.add('active');
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error refreshing sessions:', error);
                    });
            });
            
            // Socket event listeners
            socket.on('connect', () => {
                console.log('Connected to admin server');
            });
            
            socket.on('user-updated', (userData) => {
                // Update user in the UI
                const userElement = document.querySelector(`[data-user-id="${userData._id}"]`);
                if (userElement) {
                    const lastSeen = userData.lastSeen ? 
                        (new Date() - new Date(userData.lastSeen)) < 300000 ? 
                            'Online' : 
                            `Last seen ${new Date(userData.lastSeen).toLocaleDateString()}` :
                        'Never';
                    
                    const actionsHtml = userData.isSuspended ? 
                        `<div class="user-action unsuspend" title="Unsuspend User" data-user-id="${userData._id}">
                            <i class="fas fa-play"></i>
                        </div>` :
                        `<div class="user-action suspend" title="Suspend User" data-user-id="${userData._id}">
                            <i class="fas fa-pause"></i>
                        </div>`;
                    
                    userElement.innerHTML = `
                        <div class="user-info">
                            <div class="user-avatar-small ${userData.isSuperAdmin ? 'super-admin' : ''}">
                                ${userData.profile?.profilePic ? 
                                    `<img src="${userData.profile.profilePic}" alt="${userData.username}">` : 
                                    userData.username.charAt(0).toUpperCase()}
                            </div>
                            <div class="user-details">
                                <div class="user-name">
                                    ${userData.profile?.name || userData.username}
                                    ${userData.isAdmin ? '<i class="fas fa-check-circle" style="color: var(--info);"></i>' : ''}
                                    ${userData.isSuperAdmin ? '<i class="fas fa-star" style="color: gold;"></i><i class="fas fa-star" style="color: gold;"></i>' : ''}
                                </div>
                                <div class="user-username">@${userData.username}</div>
                                <div class="user-status ${userData.lastSeen && (new Date() - new Date(userData.lastSeen)) < 300000 ? 'online' : ''}">
                                    <i class="fas ${userData.lastSeen && (new Date() - new Date(userData.lastSeen)) < 300000 ? 'fa-circle' : 'fa-clock'}"></i>
                                    ${lastSeen}
                                </div>
                            </div>
                        </div>
                        
                        <div class="user-actions">
                            ${actionsHtml}
                            
                            ${!userData.isSuperAdmin ? 
                                (userData.isAdmin ? 
                                    `<div class="user-action admin" title="Remove Admin" data-user-id="${userData._id}">
                                        <i class="fas fa-user-minus"></i>
                                    </div>` :
                                    `<div class="user-action admin" title="Make Admin" data-user-id="${userData._id}">
                                        <i class="fas fa-user-plus"></i>
                                    </div>`) : ''}
                            
                            ${!userData.isSuperAdmin ? 
                                `<div class="user-action ban" title="Ban User" data-user-id="${userData._id}">
                                    <i class="fas fa-ban"></i>
                                </div>` : ''}
                        </div>
                    `;
                    
                    // Add event listeners to new elements
                    userElement.querySelector('.suspend, .unsuspend').addEventListener('click', (e) => {
                        const userId = e.currentTarget.dataset.userId;
                        currentAction = { 
                            type: e.currentTarget.classList.contains('suspend') ? 'suspend' : 'unsuspend', 
                            userId 
                        };
                        
                        document.getElementById('suspendModalTitle').textContent = 
                            currentAction.type === 'suspend' ? 'Suspend User' : 'Unsuspend User';
                        
                        document.getElementById('suspendModalMessage').textContent = 
                            currentAction.type === 'suspend' ? 
                                'Are you sure you want to suspend this user? They will be unable to use the platform until unsuspended.' :
                                'Are you sure you want to unsuspend this user? They will regain access to the platform.';
                        
                        suspendModal.classList.add('active');
                    });
                    
                    if (!userData.isSuperAdmin) {
                        userElement.querySelector('.admin').addEventListener('click', (e) => {
                            const userId = e.currentTarget.dataset.userId;
                            const isCurrentAdmin = e.currentTarget.previousElementSibling && 
                                                  e.currentTarget.previousElementSibling.classList.contains('fa-user-minus');
                            
                            currentAction = { 
                                type: isCurrentAdmin ? 'remove-admin' : 'make-admin', 
                                userId 
                            };
                            
                            document.getElementById('adminModalTitle').textContent = 
                                isCurrentAdmin ? 'Remove Admin' : 'Make Admin';
                            
                            document.getElementById('adminModalMessage').textContent = 
                                isCurrentAdmin ? 
                                    'Are you sure you want to remove admin privileges from this user?' :
                                    'Are you sure you want to make this user an admin?';
                            
                            adminModal.classList.add('active');
                        });
                        
                        userElement.querySelector('.ban').addEventListener('click', (e) => {
                            const userId = e.currentTarget.dataset.userId;
                            currentAction = { type: 'ban', userId };
                            banModal.classList.add('active');
                        });
                    }
                }
            });
            
            socket.on('session-deleted', (sessionId) => {
                // Remove session from UI
                const sessionElement = document.querySelector(`[data-session-id="${sessionId}"]`);
                if (sessionElement) {
                    sessionElement.remove();
                }
            });
            
            socket.on('community-typing', (data) => {
                if (data.isTyping) {
                    typingIndicator.style.display = 'flex';
                    typingIndicator.querySelector('.typing-text').textContent = `${data.username} is typing...`;
                    
                    // Clear typing indicator after a delay
                    clearTimeout(typingTimeout);
                    typingTimeout = setTimeout(() => {
                        typingIndicator.style.display = 'none';
                    }, 3000);
                } else {
                    typingIndicator.style.display = 'none';
                }
            });
            
            // Initialize particles.js
            particlesJS('particles-js', {
                particles: {
                    number: {
                        value: 80,
                        density: {
                            enable: true,
                            value_area: 800
                        }
                    },
                    color: {
                        value: '#6366f1'
                    },
                    shape: {
                        type: 'circle',
                        stroke: {
                            width: 0,
                            color: '#000000'
                        },
                        polygon: {
                            nb_sides: 5
                        },
                        image: {
                            src: 'img/github.svg',
                            width: 100,
                            height: 100
                        }
                    },
                    opacity: {
                        value: 0.5,
                        random: true,
                        anim: {
                            enable: true,
                            speed: 1,
                            opacity_min: 0.1,
                            sync: false
                        }
                    },
                    size: {
                        value: 3,
                        random: true,
                        anim: {
                            enable: false,
                            speed: 40,
                            size_min: 0.1,
                            sync: false
                        }
                    },
                    line_linked: {
                        enable: true,
                        distance: 150,
                        color: '#6366f1',
                        opacity: 0.2,
                        width: 1
                    },
                    move: {
                        enable: true,
                        speed: 2,
                        direction: 'none',
                        random: false,
                        straight: false,
                        out_mode: 'out',
                        bounce: false,
                        attract: {
                            enable: false,
                            rotateX: 600,
                            rotateY: 1200
                        }
                    }
                },
                interactivity: {
                    detect_on: 'canvas',
                    events: {
                        onhover: {
                            enable: true,
                            mode: 'grab'
                        },
                        onclick: {
                            enable: true,
                            mode: 'push'
                        },
                        resize: true
                    },
                    modes: {
                        grab: {
                            distance: 140,
                            line_linked: {
                                opacity: 0.5
                            }
                        },
                        bubble: {
                            distance: 400,
                            size: 40,
                            duration: 2,
                            opacity: 0.8,
                            speed: 3
                        },
                        repulse: {
                            distance: 200,
                            duration: 0.4
                        },
                        push: {
                            particles_nb: 4
                        },
                        remove: {
                            particles_nb: 2
                        }
                    }
                },
                retina_detect: true
            });
        });
    </script>
</body>
</html>
